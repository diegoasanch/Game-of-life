{"version":3,"sources":["styles/colors.ts","components/SizeInput/SizeInput.tsx","components/SpeedInput/SpeedInput.tsx","components/Sidebar/Sidebar.tsx","context/game.ts","components/Cell/Cell.tsx","components/CellGrid/CellGrid.tsx","pages/Game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dark","SizeInput","value","maxValue","placeholder","handleInput","allowNumericCharactersOnly","min","max","onValueChange","SpeedInput","setValue","onChange","labelStepSize","Container","styled","div","Stats","Count","span","Sidebar","rows","cols","setRows","setCols","iterateOnce","speed","setSpeed","isPlaying","togglePlaying","resetBoard","iterationCount","className","content","position","Position","TOP","onClick","icon","intent","text","rightIcon","event","ToggleCellState","createContext","col","row","console","log","StyledCell","props","alive","Cell","cellData","toggleCell","useContext","column","Row","CellGrid","length","map","index","cell","PageContainer","MainContainer","deep_copy","to_copy","JSON","parse","stringify","aliveNextCycle","board","ROWS","COLS","current","UP","DOWN","LEFT","RIGHT","HAS_RIGHT","HAS_DOWN","HAS_UP","HAS_LEFT","alive_neighbors","Number","createBoard","random","array","i","j","push","Math","round","age","Game","useState","colCount","setColCount","rowCount","setRowCount","setContent","setIsPlaying","setIterationCount","Array","isArray","time","copied_data","new_state","nextCycle","prev","timeEnd","initializeBoard","useEffect","useInterval","Provider","copiedContent","valueAsNumber","valueAsString","innputElement","old","Page","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7623b27a.chunk.js","sourcesContent":["export const dark = {\r\n    background: '#2F3437',\r\n    text: '#EBEBEB',\r\n    sidebar: '#151515',\r\n    cellAlive: '#0E0F10',\r\n    cellDead: '#4F585D',\r\n    header: '#19A6FF'\r\n}\r\n","import React from 'react'\r\nimport {  NumericInput } from \"@blueprintjs/core\";\r\nimport { numInputCallback } from '../../types/inputs'\r\n\r\ninterface Iprops {\r\n    value: number,\r\n    maxValue: number | undefined,\r\n    placeholder: string,\r\n    handleInput: numInputCallback,\r\n}\r\n\r\nconst SizeInput = ({ value, maxValue, placeholder, handleInput }: Iprops) => {\r\n\r\n    return (\r\n        <NumericInput\r\n            allowNumericCharactersOnly={false}\r\n            min={0}\r\n            max={maxValue}\r\n            onValueChange={handleInput}\r\n            placeholder={placeholder}\r\n            value={value}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SizeInput\r\n","import React from 'react'\r\nimport { Slider } from \"@blueprintjs/core\";\r\nimport { SetNumValue } from '../../types/inputs'\r\n\r\ninterface Iprops {\r\n    value: number,\r\n    setValue: SetNumValue,\r\n}\r\n\r\n\r\nconst SpeedInput = ({ value, setValue }: Iprops) => {\r\n    return (\r\n        <Slider\r\n            value={value}\r\n            onChange={setValue}\r\n            max={30}\r\n            labelStepSize={4}\r\n            min={1}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SpeedInput\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { dark } from '../../styles/colors'\r\nimport SizeInput from '../SizeInput'\r\nimport { Label, Button, ButtonGroup, Position, H1, H3, Divider } from \"@blueprintjs/core\";\r\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\r\nimport { numInputCallback, SetNumValue } from '../../types/inputs'\r\nimport SpeedInput from '../SpeedInput'\r\n\r\nconst Container = styled.div`\r\n    min-width: 250px;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: ${dark.sidebar};\r\n    padding: 10px;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n\r\n    > * {\r\n        margin: 1em 0;\r\n    }\r\n`\r\n\r\ninterface Iprops {\r\n    rows: number,\r\n    cols: number,\r\n    setRows: numInputCallback,\r\n    setCols: numInputCallback,\r\n    speed: number,\r\n    setSpeed: SetNumValue,\r\n    isPlaying: boolean,\r\n    iterationCount: number,\r\n    iterateOnce: () => void,\r\n    resetBoard: (random: boolean | undefined) => void,\r\n    togglePlaying: () => void,\r\n}\r\n\r\nconst Stats = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-self: flex-end;\r\n`\r\n\r\nconst Count = styled.span`\r\n    color: ${dark.header};\r\n`\r\n\r\n\r\n\r\nconst Sidebar = ({\r\n    rows,\r\n    cols,\r\n    setRows,\r\n    setCols,\r\n    iterateOnce,\r\n    speed,\r\n    setSpeed,\r\n    isPlaying,\r\n    togglePlaying,\r\n    resetBoard,\r\n    iterationCount,\r\n}: Iprops) => {\r\n    const handleClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n        iterateOnce()\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <H1>Game of Life</H1>\r\n            <Divider />\r\n            <Label>\r\n                Columns\r\n                <SizeInput\r\n                    value={cols}\r\n                    maxValue={50}\r\n                    placeholder=\"Column count\"\r\n                    handleInput={setCols}\r\n                />\r\n            </Label>\r\n            <Label>\r\n                Rows\r\n                <SizeInput\r\n                    value={rows}\r\n                    maxValue={50}\r\n                    placeholder=\"Row count\"\r\n                    handleInput={setRows}\r\n                />\r\n            </Label>\r\n            <Label>\r\n                Speed\r\n                <span className=\"bp3-text-muted\"> (Hz)</span>\r\n                <SpeedInput\r\n                    value={speed}\r\n                    setValue={setSpeed}\r\n                />\r\n            </Label>\r\n            <ButtonGroup>\r\n                <Tooltip2 content=\"Reset board\" position={Position.TOP}>\r\n                    <Button\r\n                        // text=\"reset\"\r\n                        onClick={() => resetBoard(false)}\r\n                        icon=\"reset\"\r\n                        intent=\"danger\"\r\n                        />\r\n                </Tooltip2>\r\n                <Tooltip2 content=\"Randomize cells\" position={Position.TOP}>\r\n                    <Button\r\n                        // text=\"reset\"\r\n                        onClick={() => resetBoard(true)}\r\n                        icon=\"random\"\r\n                    />\r\n                </Tooltip2>\r\n                <Tooltip2 content=\"Start iterating\" position={Position.TOP}>\r\n                    <Button\r\n                        text={isPlaying ? \"Pause\" : \"Play\"}\r\n                        icon={isPlaying ? \"pause\" : \"play\"}\r\n                        intent=\"primary\"\r\n                        onClick={togglePlaying}\r\n                    />\r\n                </Tooltip2>\r\n                <Tooltip2 content=\"Step-by-step\" position={Position.TOP}>\r\n                    <Button\r\n                        rightIcon=\"step-forward\"\r\n                        // intent=\"success\"\r\n                        onClick={handleClick}\r\n                    />\r\n                </Tooltip2>\r\n\r\n            </ButtonGroup>\r\n            <Stats>\r\n                <H3>Iteration count: <Count>{iterationCount}</Count></H3>\r\n            </Stats>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import { createContext } from 'react'\r\n\r\nexport const ToggleCellState = createContext((col: number, row: number) => {console.log('Not yet configured')})\r\n","import React, { useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { dark } from '../../styles/colors'\r\nimport { cellContent } from '../../types/cells'\r\nimport { ToggleCellState } from '../../context/game'\r\n\r\nconst StyledCell = styled.div<cellContent>`\r\n    height: 20px;\r\n    width: 20px;\r\n    background-color: ${props => props.alive ? dark.cellAlive : dark.cellDead};\r\n    border: solid 1px #000;\r\n`\r\n\r\ntype Iprops = {\r\n    cellData: cellContent\r\n}\r\n\r\nconst Cell = ({ cellData }: Iprops ) => {\r\n    const toggleCell = useContext(ToggleCellState)\r\n\r\n    const handleClick = () => {\r\n        toggleCell(cellData.column, cellData.row)\r\n    }\r\n\r\n    return (\r\n        <StyledCell\r\n            {...cellData}\r\n            onClick={handleClick}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Cell\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { cellContent } from '../../types/cells'\r\nimport Cell from '../Cell'\r\n\r\nconst Container = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    overflow: scroll;\r\n`\r\nconst Row = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin: 0;\r\n`\r\n\r\ninterface Iprops {\r\n    rows: cellContent[][] | undefined\r\n}\r\n\r\nconst CellGrid = ({ rows }: Iprops) => {\r\n    return (\r\n        <>\r\n            { (rows?.length && rows[0].length) ?\r\n                <Container>\r\n                    { rows.map((row, index) => (\r\n                        <Row key={`row_${index}`}>\r\n                            { row.map( cell => (\r\n                                <Cell\r\n                                    key={`cell_${cell.row}_${cell.column}`}\r\n                                    cellData={cell}\r\n\r\n                                />\r\n                            ))}\r\n                        </Row>\r\n                    ))}\r\n                </Container>\r\n                :\r\n                <h1>Empty cells</h1>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CellGrid\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Sidebar from '../../components/Sidebar'\r\nimport CellGrid from '../../components/CellGrid'\r\nimport { dark } from '../../styles/colors'\r\nimport { numInputCallback, SetNumValue } from '../../types/inputs'\r\nimport { boardData } from '../../types/cells'\r\nimport { ToggleCellState } from '../../context/game'\r\nimport { useInterval } from 'react-use';\r\n\r\nconst PageContainer = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: ${dark.background};\r\n    color: ${dark.text};\r\n    display: flex;\r\n    flex-direction: row;\r\n`\r\nconst MainContainer = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`\r\n\r\nconst deep_copy = (to_copy: any): any => {\r\n    return JSON.parse(JSON.stringify(to_copy))\r\n}\r\n\r\nconst aliveNextCycle = (board: boardData, row: number, col: number): boolean => {\r\n    const ROWS = board.length;\r\n    const COLS = board[0].length;\r\n    const current = board[row][col]\r\n\r\n    const UP = row - 1\r\n    const DOWN = row + 1\r\n    const LEFT = col - 1\r\n    const RIGHT = col + 1\r\n\r\n    const HAS_RIGHT = RIGHT < COLS\r\n    const HAS_DOWN = DOWN < ROWS\r\n    const HAS_UP = UP >= 0\r\n    const HAS_LEFT = LEFT >= 0\r\n\r\n    const top_left = (HAS_LEFT && HAS_UP) ? Number(board[UP][LEFT].alive) : 0;\r\n    const top_center = HAS_UP ? Number(board[UP][col].alive) : 0;\r\n    const top_right = (HAS_RIGHT && HAS_UP) ? Number(board[UP][RIGHT].alive) : 0;\r\n    const center_left = HAS_LEFT ? Number(board[row][LEFT].alive) : 0;\r\n    const center_right = HAS_RIGHT ? Number(board[row][RIGHT].alive) : 0;\r\n    const bottom_left = (HAS_LEFT && HAS_DOWN) ? Number(board[DOWN][LEFT].alive) : 0;\r\n    const bottom_center = HAS_DOWN ? Number(board[DOWN][col].alive) : 0;\r\n    const bottom_right = (HAS_DOWN && HAS_RIGHT) ? Number(board[DOWN][RIGHT].alive) : 0;\r\n\r\n    const alive_neighbors = (top_left + top_center + top_right + center_left + center_right + bottom_left + bottom_center + bottom_right)\r\n    return (alive_neighbors === 3) || (current.alive && alive_neighbors === 2)\r\n}\r\n\r\nconst nextCycle = (board: boardData) : boardData => {\r\n    const copied_data = deep_copy(board) // copy the board\r\n    let i;\r\n    let j;\r\n\r\n    const rows = board.length;\r\n    const cols = board[0].length;\r\n\r\n    for (i = 0; i < rows; i++) {\r\n        for (j = 0; j < cols; j++) {\r\n            const new_state = aliveNextCycle(board, i, j)\r\n            copied_data[i][j].alive = new_state\r\n        }\r\n    }\r\n    return copied_data\r\n}\r\n\r\nconst createBoard = (rows: number, cols: number, random: boolean): boardData  => {\r\n    const array = []\r\n    let row;\r\n    for (let i = 0; i < rows; i++) {\r\n        row = []\r\n        for (let j = 0; j < cols; j++) {\r\n            row.push({\r\n                alive: random ? !!(Math.round(Math.random())) : false,\r\n                age: 0,\r\n                row: i,\r\n                column: j\r\n            })\r\n        }\r\n        array.push(row)\r\n    }\r\n    return array\r\n}\r\n\r\nconst Game = () => {\r\n\r\n    const [colCount, setColCount] = useState(30)\r\n    const [rowCount, setRowCount] = useState(30)\r\n    const [content, setContent] = useState<boardData>()\r\n    const [speed, setSpeed] = useState(1)\r\n    const [isPlaying, setIsPlaying] = useState(false)\r\n    const [iterationCount, setIterationCount] = useState(0)\r\n\r\n    const handleColInput: numInputCallback = (valueAsNumber, valueAsString, innputElement) => {\r\n        setColCount(valueAsNumber)\r\n    }\r\n    const handleRowInput: numInputCallback = (valueAsNumber, valueAsString, innputElement) => {\r\n        setRowCount(valueAsNumber)\r\n    }\r\n    const handleSpeed: SetNumValue = (value) => {\r\n        setSpeed(value)\r\n    }\r\n\r\n    const toggleState = (col: number, row: number) : void => {\r\n        if (Array.isArray(content)) {\r\n            console.log(`Toggling cell: [${row}][${col}]`)\r\n            const copiedContent = deep_copy(content)\r\n\r\n            copiedContent[row][col].alive = !copiedContent[row][col].alive\r\n            setContent(copiedContent)\r\n        }\r\n    }\r\n\r\n    const iterateOnce = () => {\r\n        if (Array.isArray(content)) {\r\n            console.time(\"Iterating board!!\")\r\n            setContent(nextCycle(content))\r\n            setIterationCount(prev => prev + 1)\r\n            console.timeEnd(\"Iterating board!!\")\r\n        }\r\n    }\r\n\r\n    const initializeBoard = (rows: number, cols: number, random=false) => {\r\n        setContent(createBoard(rows, cols, random))\r\n        setIterationCount(0)\r\n    }\r\n\r\n    const resetBoard = (random=false) => {\r\n        initializeBoard(rowCount, colCount, random)\r\n    }\r\n\r\n    const togglePlaying = () => {\r\n        setIsPlaying(old => !old)\r\n    }\r\n\r\n    useEffect(() => {\r\n        initializeBoard(rowCount, colCount)\r\n    }, [rowCount, colCount])\r\n\r\n    useInterval(() => {\r\n        iterateOnce()\r\n    }, isPlaying ? (1000 / speed) : null)\r\n\r\n    return (\r\n        <ToggleCellState.Provider value={toggleState} >\r\n\r\n            <PageContainer>\r\n                <Sidebar\r\n                    rows={rowCount}\r\n                    cols={colCount}\r\n                    setRows={handleRowInput}\r\n                    setCols={handleColInput}\r\n                    iterateOnce={iterateOnce}\r\n                    speed={speed}\r\n                    setSpeed={handleSpeed}\r\n                    isPlaying={isPlaying}\r\n                    togglePlaying={togglePlaying}\r\n                    resetBoard={resetBoard}\r\n                    iterationCount={iterationCount}\r\n                />\r\n                <MainContainer>\r\n                    <CellGrid\r\n                        rows={content}\r\n                    />\r\n                </MainContainer>\r\n            </PageContainer>\r\n        </ToggleCellState.Provider>\r\n    )\r\n}\r\n\r\nexport default Game\r\n","import React from 'react';\nimport Game from './pages/Game'\n\nimport styled from 'styled-components'\nconst Page = styled.div`\n  height: 100vh;\n  width: 100vw;\n`\n\nfunction App() {\n  return (\n    <Page className=\"bp3-dark .bp3-ui-text\">\n      <Game />\n    </Page>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}