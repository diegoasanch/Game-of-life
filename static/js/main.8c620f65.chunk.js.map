{"version":3,"sources":["styles/colors.ts","context/theme.ts","components/SizeInput/SizeInput.tsx","components/SpeedInput/SpeedInput.tsx","components/Sidebar/Sidebar.tsx","context/game.ts","components/Cell/Cell.tsx","components/CellGrid/CellGrid.tsx","pages/Game/gameFunctions.ts","components/BoardMenu/BoardMenu.tsx","components/Models/game.ts","utils/toaster.ts","pages/Game/Game.tsx","pages/SavedGame/SavedGame.tsx","pages/SharedGame/SharedGame.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dark","background","text","sidebar","cellBorder","cellAlive","cellDead","header","scrollBarBg","scrollBarThumb","light","default_theme_context","isDark","toggleTheme","console","warn","CurrentTheme","createContext","ThemeContext","SizeInput","value","maxValue","placeholder","handleInput","allowNumericCharactersOnly","min","max","onValueChange","fill","SpeedInput","setValue","onChange","labelStepSize","Container","styled","div","props","theme","Stats","footer","Count","span","StyledHeader","H1","HeaderContainer","StyledDivider","Divider","Settings","StyledSwitch","Switch","SectionHeader","H3","InlineIcon","Icon","TooltipContent","Shoutout","H6","SizeInputRow","HeaderTooltip","className","packageJson","version","icon","Sidebar","rows","cols","setRows","setCols","iterateOnce","speed","setSpeed","isPlaying","togglePlaying","resetBoard","iterationCount","highlightNew","toggleHighlightNew","useContext","content","position","Position","RIGHT","intent","alignIndicator","Alignment","checked","innerLabel","innerLabelChecked","large","label","TOP","onClick","rightIcon","event","disabled","href","target","rel","ToggleCellState","col","row","log","StyledCell","alive","age","Cell","cellData","toggleCell","column","Row","CellGrid","length","map","index","cell","aliveNextCycle","board","ROWS","COLS","current","UP","DOWN","LEFT","HAS_RIGHT","HAS_DOWN","HAS_UP","HAS_LEFT","alive_neighbors","Number","deep_copy","to_copy","JSON","parse","stringify","heartPattern","generateBoard","random","pattern","is_alive","generated","i","j","Math","round","parseInt","push","createBoard","heart","replaceAll","saved_label","name","replace","getGameLink","getCols","getRows","byte","bin","hex","substring","toString","padStart","board_to_hex","board_content","window","location","host","new_hex","repeating","char","every","a","count","shorten_hex","hex_to_board","zipped_hex","out","separator","indexOf","repetitions","repeat","unzip_hex","hex_to_bin","created","Date","edited","StyledForm","FormGroup","BoardMenu","setName","saveBoard","share","labelElement","labelFor","labelInfo","id","autoFocus","Board","loaded_board","this","AppToaster","Toaster","create","PageContainer","SideContainer","MainContainer","ResizedContextMenu","ContextMenu2","Game","fromStorage","loadedBoard","useState","colCount","setColCount","rowCount","setRowCount","setContent","setIsPlaying","setIterationCount","useLocalStorage","setHighlightNew","history","useHistory","Array","isArray","new_state","current_cell","copied_data","nextCycle","prev","initializeBoard","old","handleSave","to_save","storage_key","localStorage","hasOwnProperty","formated_board","board_to_saved_format","serialized_board","setItem","showToast","alert","message","show","getShareableLink","link","navigator","clipboard","writeText","useEffect","useInterval","hotkeys","useMemo","combo","global","onKeyDown","useHotkeys","handleKeyDown","handleKeyUp","onKeyUp","Provider","copiedContent","valueAsNumber","valueAsString","innputElement","default_saved_board","SavedGame","useParams","savedBoard","setSavedBoard","from_localstorage","board_string","getItem","parsed_board","getBoard","SharedGame","dimensions","generated_board","error","parsed_rows","parsed_cols","includes","split","str_rows","str_cols","isNaN","side","FocusStyleManager","onlyShowFocusOnTabs","Page","App","setIsDark","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c620f65.chunk.js","sourcesContent":[" import { Itheme } from '../types/styles'\r\n\r\nexport const dark: Itheme = {\r\n    background: '#2F3437',\r\n    text: '#EBEBEB',\r\n    sidebar: '#151515',\r\n    cellBorder: '#000000',\r\n    cellAlive: '#0E0F1E',\r\n    cellDead: '#586268',\r\n    header: '#19A6FF',\r\n    scrollBarBg: '#2F3437',\r\n    scrollBarThumb: '#151515',\r\n}\r\nexport const light: Itheme = {\r\n    background: '#EBEBEB',\r\n    text: '#37352F',\r\n    sidebar: '#FFFFFF',\r\n    cellBorder: '#343434',\r\n    cellAlive: '#0E0F10',\r\n    cellDead: '#EEEEEE',\r\n    header: '#19A6FF',\r\n    scrollBarBg: '#EBEBEB',\r\n    scrollBarThumb: '#888',\r\n}\r\n","import { createContext } from 'react'\r\nimport { dark } from '../styles/colors'\r\nimport { IthemeContext } from '../types/theme'\r\nimport { Itheme } from '../types/styles'\r\n\r\nexport const default_theme_context = {\r\n    isDark: true,\r\n    toggleTheme: () => console.warn('No toggle theme function defined.'),\r\n}\r\n\r\nexport const CurrentTheme = createContext<Itheme>(dark)\r\n\r\nexport const ThemeContext = createContext<IthemeContext>(default_theme_context)\r\n","import React from 'react'\r\nimport {  NumericInput } from \"@blueprintjs/core\";\r\nimport { numInputCallback } from '../../types/inputs'\r\n\r\ninterface Iprops {\r\n    value: number,\r\n    maxValue: number | undefined,\r\n    placeholder: string,\r\n    handleInput: numInputCallback,\r\n}\r\n\r\nconst SizeInput = ({ value, maxValue, placeholder, handleInput }: Iprops) => {\r\n\r\n    return (\r\n        <NumericInput\r\n            allowNumericCharactersOnly={false}\r\n            min={0}\r\n            max={maxValue}\r\n            onValueChange={handleInput}\r\n            placeholder={placeholder}\r\n            value={value}\r\n            fill\r\n        />\r\n    )\r\n}\r\n\r\nexport default SizeInput\r\n","import React from 'react'\r\nimport { Slider } from \"@blueprintjs/core\";\r\nimport { SetNumValue } from '../../types/inputs'\r\n\r\ninterface Iprops {\r\n    value: number,\r\n    setValue: SetNumValue,\r\n}\r\n\r\n\r\nconst SpeedInput = ({ value, setValue }: Iprops) => {\r\n    return (\r\n        <Slider\r\n            value={value}\r\n            onChange={setValue}\r\n            max={30}\r\n            labelStepSize={4}\r\n            min={1}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SpeedInput\r\n","import React, { useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { dark } from '../../styles/colors'\r\nimport SizeInput from '../SizeInput'\r\nimport { Label, Button, ButtonGroup, Position, H1, H3, H4, Divider, Switch, Alignment, Icon, H6 } from \"@blueprintjs/core\";\r\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\r\nimport { numInputCallback, SetNumValue } from '../../types/inputs'\r\nimport SpeedInput from '../SpeedInput'\r\nimport { CurrentTheme } from '../../context/theme'\r\nimport { IthemeProp } from '../../types/styles'\r\nimport packageJson from '../../../package.json';\r\n\r\nconst Container = styled.div<IthemeProp>`\r\n    position: relative;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: ${props => props.theme.sidebar};\r\n    padding: 8px;\r\n    align-items: center;\r\n    justify-content: stretch;\r\n`\r\nconst Stats = styled.footer<IthemeProp>`\r\n    position: absolute;\r\n    bottom: 5px;\r\n    left: 10px;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    justify-self: end;\r\n    margin-top: 10px;\r\n    width: 90%;\r\n    height: 5em;\r\n\r\n    background-color: ${props => props.theme.sidebar};\r\n    z-index: 34;\r\n\r\n    .divider {\r\n        margin-bottom: 10px;\r\n    }\r\n`\r\n\r\nconst Count = styled.span`\r\n    color: ${dark.header};\r\n`\r\nconst StyledHeader = styled(H1)`\r\n    font-size: 4em !important;\r\n    line-height: .9em !important;\r\n    font-weight: bold;\r\n    align-self: flex-start;\r\n`\r\nconst HeaderContainer = styled.header`\r\n    position: relative;\r\n    width: 100%;\r\n`\r\nconst StyledDivider = styled(Divider)`\r\n    width: 100%;\r\n`\r\nconst Settings = styled.div<IthemeProp>`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    overflow-y: auto;\r\n    width: 100%;\r\n    margin-bottom: 4.5em;\r\n    /* margin-right: 5px; */\r\n\r\n    > * {\r\n        margin: .5em 0;\r\n    }\r\n    &::-webkit-scrollbar {\r\n        /* display: none; */\r\n        background-color: ${props => props.theme.scrollBarBg};\r\n        width: 5px;\r\n        height: 5px;\r\n    }\r\n    &::-webkit-scrollbar-thumb {\r\n        background-color: ${props => props.theme.scrollBarThumb};\r\n    }\r\n    /* &:hover {\r\n        margin-right: 0;\r\n        &::-webkit-scrollbar {\r\n            display: contents;\r\n        }\r\n    } */\r\n`\r\nconst StyledSwitch = styled(Switch)`\r\n    position: absolute;\r\n    bottom: 0;\r\n    right: 0;\r\n`\r\nconst SectionHeader = styled(H3)`\r\n    align-self: flex-flex-start;\r\n`\r\nconst InlineIcon = styled(Icon)`\r\n    display: inline-block;\r\n    vertical-align: super;\r\n    margin-left: .2em;\r\n`\r\nconst TooltipContent = styled.div`\r\n    width: 40vw;\r\n    max-width: 1000px;\r\n    min-width: 500px;\r\n    padding: 1em;\r\n`\r\nconst Shoutout = styled(H6)`\r\n    font-size: .9em !important;\r\n\r\n    a &:not(:hover) {\r\n        color: inherit;\r\n    }\r\n`\r\nconst SizeInputRow = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    justify-items: center;\r\n    align-items: center;\r\n\r\n    > * {\r\n        padding: 0 5%;\r\n    }\r\n`\r\n\r\ninterface Iprops {\r\n    rows: number,\r\n    cols: number,\r\n    setRows: numInputCallback,\r\n    setCols: numInputCallback,\r\n    speed: number,\r\n    setSpeed: SetNumValue,\r\n    isPlaying: boolean,\r\n    iterationCount: number,\r\n    iterateOnce: () => void,\r\n    resetBoard: (random: boolean | undefined, heart: boolean | undefined) => void,\r\n    togglePlaying: () => void,\r\n    readonly isDark: boolean,\r\n    toggleTheme: () => void,\r\n    readonly highlightNew: boolean,\r\n    toggleHighlightNew: () => void,\r\n}\r\n\r\nconst HeaderTooltip = (\r\n    <TooltipContent>\r\n        <h1>Conway's Game of Life <span className=\"bp3-text-muted\"> - v{packageJson.version}</span></h1>\r\n        <p>\r\n            &emsp; Is a <strong>cellular automaton</strong> devised by the\r\n            British mathematician John\r\n            Horton Conway in 1970. It is a zero-player game, meaning that its\r\n            evolution is determined by its initial state, requiring no further\r\n            input.<br/>\r\n            &emsp; One interacts with the Game of Life by creating an initial\r\n            configuration and observing how it evolves.\r\n\r\n        </p>\r\n        <h2>How to play?</h2>\r\n        <p>\r\n            &emsp; Click on a cell to change its state. Change as many cells as you want and\r\n            press <strong><Icon icon=\"play\"/> Play</strong>!\r\n            <br/>\r\n            &emsp; Alternatively, click the <strong><Icon icon=\"step-forward\"/> Step by step </strong>\r\n            button to evolve the board one cycle at a time.\r\n        </p>\r\n        <h2>Rules</h2>\r\n        <ul>\r\n            <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation.</li>\r\n            <li>Any live cell with two or three live neighbours lives on to the next generation.</li>\r\n            <li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li>\r\n            <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\r\n        </ul>\r\n    </TooltipContent>\r\n)\r\n\r\nconst Sidebar = ({\r\n    rows,\r\n    cols,\r\n    setRows,\r\n    setCols,\r\n    iterateOnce,\r\n    speed,\r\n    setSpeed,\r\n    isPlaying,\r\n    togglePlaying,\r\n    resetBoard,\r\n    iterationCount,\r\n    isDark,\r\n    toggleTheme,\r\n    highlightNew,\r\n    toggleHighlightNew,\r\n}: Iprops) => {\r\n\r\n    const theme = useContext(CurrentTheme)\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n        iterateOnce()\r\n    }\r\n\r\n\r\n    return (\r\n        <Container theme={theme}>\r\n\r\n            <HeaderContainer>\r\n                <Tooltip2 content={HeaderTooltip} position={Position.RIGHT}>\r\n                    <StyledHeader>\r\n                        Game <br/>\r\n                        of <br/>\r\n                        Life\r\n                        <InlineIcon icon=\"info-sign\" intent=\"primary\"/>\r\n                    </StyledHeader>\r\n                </Tooltip2>\r\n                <StyledSwitch\r\n                    alignIndicator={Alignment.RIGHT}\r\n                    checked={isDark}\r\n                    onChange={toggleTheme}\r\n                    innerLabel=\"🌞\"\r\n                    innerLabelChecked=\"🌚\"\r\n                    large\r\n                />\r\n            </HeaderContainer>\r\n\r\n            <StyledDivider />\r\n\r\n            <Settings theme={theme}>\r\n\r\n                <SectionHeader>Settings</SectionHeader>\r\n\r\n                <Switch\r\n                    alignIndicator={Alignment.RIGHT}\r\n                    checked={highlightNew}\r\n                    onChange={toggleHighlightNew}\r\n                    label=\"Highlight new cells\"\r\n                    // large\r\n                />\r\n                <SizeInputRow>\r\n                    <Label>\r\n                        Rows\r\n                        <SizeInput\r\n                            value={rows}\r\n                            maxValue={250}\r\n                            placeholder=\"Row count\"\r\n                            handleInput={setRows}\r\n                        />\r\n                    </Label>\r\n                    <Label>\r\n                        Columns\r\n                        <SizeInput\r\n                            value={cols}\r\n                            maxValue={250}\r\n                            placeholder=\"Column count\"\r\n                            handleInput={setCols}\r\n                        />\r\n                    </Label>\r\n                </SizeInputRow>\r\n                <Label>\r\n                    Iteration Speed\r\n                    <span className=\"bp3-text-muted\"> (Hz)</span>\r\n                    <SpeedInput\r\n                        value={speed}\r\n                        setValue={setSpeed}\r\n                    />\r\n                </Label>\r\n\r\n                <ButtonGroup large>\r\n                    <Tooltip2 content={`${isPlaying ? 'Stop': 'Start'} iterating`} position={Position.TOP}>\r\n                        <Button\r\n                            text={isPlaying ? \"Pause\" : \"Play\"}\r\n                            icon={isPlaying ? \"pause\" : \"play\"}\r\n                            intent=\"primary\"\r\n                            onClick={togglePlaying}\r\n                        />\r\n                    </Tooltip2>\r\n                    <Tooltip2 content=\"Step-by-step\" position={Position.TOP}>\r\n                        <Button\r\n                            rightIcon=\"step-forward\"\r\n                            onClick={handleClick}\r\n                            disabled={isPlaying}\r\n                        />\r\n                    </Tooltip2>\r\n\r\n                </ButtonGroup>\r\n                <ButtonGroup>\r\n                    <Tooltip2 content=\"Reset board\" position={Position.TOP}>\r\n                        <Button\r\n                            onClick={() => resetBoard(false, true)}\r\n                            icon=\"reset\"\r\n                            intent=\"danger\"\r\n                        />\r\n                    </Tooltip2>\r\n                    <Tooltip2 content=\"Clear board\" position={Position.TOP}>\r\n                        <Button\r\n                            onClick={() => resetBoard(false, false)}\r\n                            icon=\"eraser\"\r\n                        />\r\n                    </Tooltip2>\r\n                    <Tooltip2 content=\"Randomize cells\" position={Position.TOP}>\r\n                        <Button\r\n                            text=\"Random\"\r\n                            onClick={() => resetBoard(true, false)}\r\n                            icon=\"random\"\r\n                        />\r\n                    </Tooltip2>\r\n                </ButtonGroup>\r\n            </Settings>\r\n\r\n\r\n            <Stats theme={theme}>\r\n                <StyledDivider className=\"divider\" />\r\n                {/* <SectionHeader>Info</SectionHeader> */}\r\n\r\n                <H4>Iteration count: <Count>{iterationCount}</Count></H4>\r\n                <Shoutout className=\"bp3-text-muted\">\r\n                    Made with 💖 by&nbsp;\r\n                    <a href=\"https://github.com/diegoasanch\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        Diego.\r\n                    </a>\r\n                </Shoutout>\r\n\r\n            </Stats>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import { createContext } from 'react'\r\n\r\nexport const ToggleCellState = createContext((col: number, row: number) => {console.log('Not yet configured')})\r\n","import React, { useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { cellContent } from '../../types/cells'\r\nimport { ToggleCellState } from '../../context/game'\r\nimport { CurrentTheme } from '../../context/theme'\r\nimport { IthemeProp, ICellType } from '../../types/styles'\r\n\r\nconst StyledCell = styled.div<cellContent & IthemeProp & ICellType>`\r\n    height: 20px;\r\n    width: 20px;\r\n    background-color: ${props => (\r\n        props.alive ? ((props.age !== 1 || !props.highlightNew) ? props.theme.cellAlive : props.theme.header) : props.theme.cellDead\r\n    )};\r\n    border: solid 1px ${props => props.theme.cellBorder};\r\n`\r\n\r\ntype Iprops = {\r\n    cellData: cellContent,\r\n    highlightNew: boolean,\r\n}\r\n\r\nconst Cell = ({ cellData, highlightNew }: Iprops ) => {\r\n    const toggleCell = useContext(ToggleCellState)\r\n    const theme = useContext(CurrentTheme)\r\n\r\n    const handleClick = () => {\r\n        toggleCell(cellData.column, cellData.row)\r\n    }\r\n\r\n    return (\r\n        <StyledCell\r\n            {...cellData}\r\n            onClick={handleClick}\r\n            theme={theme}\r\n            highlightNew={highlightNew}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Cell\r\n","import React, { useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { CurrentTheme } from '../../context/theme'\r\nimport { cellContent } from '../../types/cells'\r\nimport { IthemeProp } from '../../types/styles'\r\nimport { H1 } from '@blueprintjs/core'\r\nimport Cell from '../Cell'\r\n\r\nconst Container = styled.div<IthemeProp>`\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    overflow: scroll;\r\n    height: 100%;\r\n    width: 100%;\r\n    justify-content: center;\r\n\r\n    &::-webkit-scrollbar {\r\n        background-color: ${props => props.theme.scrollBarBg};\r\n        width: 10px;\r\n        height: 10px;\r\n    }\r\n    &::-webkit-scrollbar-thumb {\r\n        background-color: ${props => props.theme.scrollBarThumb};\r\n    }\r\n`\r\nconst Row = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin: 0;\r\n`\r\n\r\ninterface Iprops {\r\n    rows: cellContent[][] | undefined,\r\n    highlightNew: boolean,\r\n}\r\n\r\nconst CellGrid = ({ rows, highlightNew }: Iprops) => {\r\n    const theme = useContext(CurrentTheme)\r\n\r\n    return (\r\n        <Container theme={theme}>\r\n            { (rows?.length && rows[0].length) ?\r\n                    ( rows.map((row, index) => (\r\n                        <Row key={`row_${index}`}>\r\n                            { row.map( cell => (\r\n                                <Cell\r\n                                    key={`cell_${cell.row}_${cell.column}`}\r\n                                    cellData={cell}\r\n                                    highlightNew={highlightNew}\r\n                                />\r\n                            ))}\r\n                        </Row>\r\n                    )\r\n                ))\r\n                :\r\n                <H1>Not enough cells to display 😢</H1>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CellGrid\r\n","import { boardData, IBoard, ISavedBoard } from '../../types/cells'\r\n\r\nexport const aliveNextCycle = (board: boardData, row: number, col: number): boolean => {\r\n    const ROWS = board.length;\r\n    const COLS = board[0].length;\r\n    const current = board[row][col]\r\n\r\n    const UP = row - 1\r\n    const DOWN = row + 1\r\n    const LEFT = col - 1\r\n    const RIGHT = col + 1\r\n\r\n    const HAS_RIGHT = RIGHT < COLS\r\n    const HAS_DOWN = DOWN < ROWS\r\n    const HAS_UP = UP >= 0\r\n    const HAS_LEFT = LEFT >= 0\r\n\r\n    const top_left = (HAS_LEFT && HAS_UP) ? Number(board[UP][LEFT].alive) : 0;\r\n    const top_center = HAS_UP ? Number(board[UP][col].alive) : 0;\r\n    const top_right = (HAS_RIGHT && HAS_UP) ? Number(board[UP][RIGHT].alive) : 0;\r\n    const center_left = HAS_LEFT ? Number(board[row][LEFT].alive) : 0;\r\n    const center_right = HAS_RIGHT ? Number(board[row][RIGHT].alive) : 0;\r\n    const bottom_left = (HAS_LEFT && HAS_DOWN) ? Number(board[DOWN][LEFT].alive) : 0;\r\n    const bottom_center = HAS_DOWN ? Number(board[DOWN][col].alive) : 0;\r\n    const bottom_right = (HAS_DOWN && HAS_RIGHT) ? Number(board[DOWN][RIGHT].alive) : 0;\r\n\r\n    const alive_neighbors = (top_left + top_center + top_right + center_left + center_right + bottom_left + bottom_center + bottom_right)\r\n    return (alive_neighbors === 3) || (current.alive && alive_neighbors === 2)\r\n}\r\n\r\nexport const nextCycle = (board: boardData) : boardData => {\r\n    const copied_data = deep_copy(board) // copy the board\r\n    let i;\r\n    let j;\r\n\r\n    const rows = board.length;\r\n    const cols = board[0].length;\r\n    let new_state\r\n    let current_cell\r\n\r\n    for (i = 0; i < rows; i++) {\r\n        for (j = 0; j < cols; j++) {\r\n            new_state = aliveNextCycle(board, i, j)\r\n            current_cell = copied_data[i][j]\r\n            current_cell.alive = new_state\r\n\r\n            if (new_state) {\r\n                current_cell.age += 1\r\n            }\r\n            else {\r\n                current_cell.age = 0\r\n            }\r\n        }\r\n    }\r\n    return copied_data\r\n}\r\n\r\nexport const deep_copy = (to_copy: any): any => {\r\n    return JSON.parse(JSON.stringify(to_copy))\r\n}\r\n\r\n\r\nconst heartPattern: string = `\r\n0000000000000000000000000100000000000000\r\n0000000000000000000000000000000100000000\r\n0000000000100000000000010000000100000000\r\n0001100011000000100000000000000100000110\r\n0000100001000000010000000000000000000010\r\n0000000000000000001000000000000000000000\r\n0000000000000000000000000000000000000000\r\n0000000000000000000000000000000001000000\r\n0000000000000000000000000010000000000000\r\n0000000000000000000000000000000000000000\r\n0000000000000000011000110000000000000000\r\n0000000000000000111101111000000000000000\r\n0001100000000001111111111100000000000000\r\n0011000000000001111111111100000000000000\r\n0010000000000000111111111000000011000001\r\n0000000000000000011111110000000000000000\r\n0000100001000000001111100000000000000010\r\n0000100001001000000111000000000000000010\r\n0000100001011100000010000000000000000010\r\n0000000000110000000000000000000000000000\r\n0000000000000000000000000000000000000000\r\n0000000000000000000000000000000000000000\r\n0000000000000000000000000010000000000000\r\n0000000000000000000000000111000000000000\r\n0000000000000000000000000010000100000000\r\n0000011100001110000000000000000010000000\r\n0000000000000010000000000000000001000000\r\n0000000000000000000000000000000000000000\r\n0000000000000000000000110000000011000000\r\n1000010000000000000000100000000001100000\r\n`\r\n\r\nconst generateBoard = (rows: number, cols: number, random?: boolean, pattern?: string): boardData => {\r\n    const generated = []\r\n    let row;\r\n    let is_alive\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n        row = []\r\n        for (let j = 0; j < cols; j++) {\r\n            if (random)\r\n                is_alive = !!(Math.round(Math.random()))\r\n            else if (pattern?.length)\r\n                is_alive = !!parseInt(pattern[(i * cols) + j])\r\n            else\r\n                is_alive = false;\r\n\r\n            row.push({\r\n                alive: is_alive,\r\n                age: 0,\r\n                row: i,\r\n                column: j\r\n            })\r\n        }\r\n        generated.push(row)\r\n    }\r\n    return generated\r\n}\r\n\r\nexport const createBoard = (rows: number, cols: number, random: boolean, heart=false): boardData  => {\r\n\r\n    const pattern = heartPattern.replaceAll('\\n', '')\r\n\r\n    if (heart)\r\n        return generateBoard(rows, cols, random, pattern)\r\n    return generateBoard(rows, cols, random)\r\n}\r\n\r\nexport const saved_label = (name: string): string => {\r\n    return `saved/${name.replace(' ', '_')}`\r\n\r\n}\r\n\r\nexport const board_to_saved_format = (to_save: IBoard): ISavedBoard => (\r\n    {\r\n        name: to_save.name,\r\n        created: to_save.created,\r\n        edited: to_save.edited,\r\n        board_content: to_save.board_content,\r\n    }\r\n)\r\n\r\nexport const saveBoard = (to_save: IBoard): void => {\r\n    const storage_key = saved_label(to_save.name)\r\n\r\n    if (window.localStorage.hasOwnProperty(storage_key)) {\r\n        to_save.edited = new Date();\r\n    }\r\n    const formated_board = board_to_saved_format(to_save)\r\n    const serialized_board = JSON.stringify(formated_board)\r\n\r\n    window.localStorage.setItem(storage_key, serialized_board)\r\n}\r\n\r\nexport const getBoard = (name: string): ISavedBoard | undefined => {\r\n\r\n    if (window.localStorage.hasOwnProperty(saved_label(name))) { // saved entry\r\n        const board_string = window.localStorage.getItem(saved_label(name)) ?? '{}'\r\n        const parsed_board = JSON.parse(board_string)\r\n        const default_content: boardData = [[]]\r\n\r\n        const loaded_board: ISavedBoard = {\r\n            name: parsed_board.name ?? 'undefined',\r\n            created: parsed_board.created ?? new Date(),\r\n            edited: parsed_board.edited ?? new Date(),\r\n            board_content: parsed_board.board_content ?? default_content,\r\n        }\r\n        return loaded_board\r\n    }\r\n    return undefined\r\n}\r\n\r\n/**\r\n * Shortens the input string, replaces long repeating strings of zeroes with\r\n * `x{LEN}` where `LEN` is the amount of repetitions\r\n * @param hex\r\n */\r\nconst shorten_hex = (hex: string): string => {\r\n    let new_hex = ''\r\n    let current = ''\r\n    let next = ''\r\n    let repeating = false\r\n\r\n    for (let char = 0; char < hex.length; char++) {\r\n        current = hex[char]\r\n        next = (char < hex.length - 1) ? hex[char + 1] : ''\r\n\r\n        if ([current, next].every(a => a === '0')) {\r\n            let count = 0\r\n            repeating = true\r\n\r\n            while (repeating && char < hex.length) {\r\n                count++\r\n                repeating = hex[++char] === current\r\n            }\r\n            new_hex += `x${count};`\r\n            char--\r\n        }\r\n        else {\r\n            new_hex += current\r\n        }\r\n    }\r\n    return new_hex\r\n}\r\n\r\nconst board_to_hex = (content: boardData): string => {\r\n    let bin = ''\r\n    let hex = ''\r\n\r\n    // Board to binary\r\n    for (let row of content) {\r\n        for (let col of row) {\r\n            bin += col.alive ? '1' : '0'\r\n        }\r\n    }\r\n    let byte;\r\n    // Binary to hex, separating in bytes\r\n    for (let i = 0; i < bin.length; i += 8) {\r\n\r\n        byte = bin.substring(i, i+8)\r\n        hex += parseInt(byte, 2).toString(16).padStart(2, '0')\r\n    }\r\n\r\n    console.log(`Binary: ${bin}\\n\\nHex: ${hex}`)\r\n\r\n    return hex\r\n}\r\n\r\nexport const getGameLink = (board: IBoard): string => {\r\n    const cols = board.getCols()\r\n    const rows = board.getRows()\r\n    const content = board_to_hex(board.board_content)\r\n\r\n\r\n    // return window.location.host + `/shared/${rows}x${cols}/${content}`\r\n    return window.location.host + `/shared/${rows}x${cols}/${shorten_hex(content)}`\r\n}\r\n\r\nconst unzip_hex = (hex: string): string => {\r\n    let out = ''\r\n    for (let i = 0; i < hex.length; i++) {\r\n        if (hex[i] !== 'x')\r\n            out += hex[i]\r\n        else {\r\n            const separator = hex.indexOf(';', i);\r\n            const repetitions = parseInt(hex.substring(i+1, separator))\r\n            // console.log({separator, repetitions, i})\r\n            i = separator\r\n\r\n            out += '0'.repeat(repetitions)\r\n        }\r\n    }\r\n    return out\r\n}\r\nconst hex_to_bin = (hex: string): string => {\r\n    let out = ''\r\n\r\n    for (let i = 0; i < hex.length; i += 2) {\r\n        let byte = hex.substring(i, i+2)\r\n        out += parseInt(byte, 16).toString(2).padStart(8, '0')\r\n    }\r\n\r\n    return out\r\n}\r\n\r\nexport const hex_to_board = (rows: number, cols: number, zipped_hex: string): ISavedBoard => {\r\n    const hex = unzip_hex(zipped_hex)\r\n    const bin = hex_to_bin(hex)\r\n\r\n    console.log(`Zipped: ${zipped_hex} \\n\\n\\n Hex: ${hex}\\n\\n\\nBinary: ${bin}`)\r\n\r\n    const content = generateBoard(rows, cols, false, bin)\r\n    const board: ISavedBoard = {\r\n        name: 'Shared board',\r\n        created: new Date(),\r\n        edited: new Date(),\r\n        board_content: content,\r\n    }\r\n\r\n    return board\r\n}\r\n","import React from 'react'\r\nimport { Menu, MenuItem, MenuDivider, Icon, InputGroup, FormGroup, Button } from \"@blueprintjs/core\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledForm = styled(FormGroup)`\r\n    padding: 0 0 5px 5px;\r\n    width: calc(100% - 10px);\r\n    margin: 0;\r\n\r\n    .save-btn {\r\n        margin-top: 5px;\r\n    }\r\n`\r\n\r\ninterface Iprops {\r\n    iterateOnce: () => void,\r\n    isPlaying: boolean,\r\n    togglePlaying: () => void,\r\n    resetBoard: (random: boolean | undefined, heart: boolean | undefined) => void,\r\n    name: string,\r\n    setName: (name: string) => void,\r\n    saveBoard: () => void,\r\n    share: () => void,\r\n}\r\n\r\nconst BoardMenu = ({\r\n    iterateOnce,\r\n    isPlaying,\r\n    togglePlaying,\r\n    resetBoard,\r\n    name,\r\n    setName,\r\n    saveBoard,\r\n    share,\r\n}: Iprops) => {\r\n\r\n    const handleNameChange = (event: React.FormEvent<HTMLElement>) => {\r\n        // console.log({changed_name})\r\n        setName((event.target as HTMLInputElement).value)\r\n    }\r\n\r\n    return (\r\n        <Menu>\r\n            <MenuItem\r\n                text={isPlaying ? \"Pause\" : \"Play\"}\r\n                icon={isPlaying ? \"pause\" : \"play\"}\r\n                onClick={togglePlaying}\r\n                intent=\"primary\"\r\n                labelElement={\r\n                    <span className=\"bp3-text-muted\">\r\n                        P\r\n                    </span>\r\n                }\r\n            />\r\n            <MenuItem\r\n                text=\"Iterate once\"\r\n                icon=\"step-forward\"\r\n                onClick={iterateOnce}\r\n                disabled={isPlaying}\r\n                labelElement={\r\n                    <span className=\"bp3-text-muted\">\r\n                        <Icon icon=\"arrow-right\" />\r\n                    </span>\r\n                }\r\n            />\r\n\r\n            <MenuDivider />\r\n            <StyledForm\r\n                label=\"Save board\"\r\n                labelFor=\"name-input\"\r\n                labelInfo={\r\n                    <>\r\n                        (<Icon icon=\"key-shift\" />S)\r\n                    </>\r\n                }\r\n            >\r\n                <InputGroup\r\n                    onChange={handleNameChange}\r\n                    value={name}\r\n                    placeholder=\"untitled_board\"\r\n                    id=\"name-input\"\r\n                    autoFocus\r\n                />\r\n                <Button\r\n                    className=\"save-btn\"\r\n                    text={\"Save\"}\r\n                    icon=\"floppy-disk\"\r\n                    onClick={saveBoard}\r\n                    fill\r\n                />\r\n\r\n            </StyledForm>\r\n            <MenuItem\r\n                text=\"Share\"\r\n                icon=\"share\"\r\n                onClick={share}\r\n                labelElement={\r\n                    <span className=\"bp3-text-muted\">\r\n                        <Icon icon=\"key-shift\" />H\r\n                    </span>\r\n                }\r\n            />\r\n\r\n            <MenuDivider />\r\n\r\n            <MenuItem\r\n                text=\"Randomize cells\"\r\n                icon=\"random\"\r\n                onClick={() => resetBoard(true, false)}\r\n                labelElement={\r\n                    <span className=\"bp3-text-muted\">\r\n                        <Icon icon=\"key-shift\" />N\r\n                    </span>\r\n                }\r\n            />\r\n            <MenuItem\r\n                text=\"Clear\"\r\n                icon=\"eraser\"\r\n                onClick={() => resetBoard(false, false)}\r\n                labelElement={\r\n                    <span className=\"bp3-text-muted\">\r\n                        <Icon icon=\"key-shift\" />C\r\n                    </span>\r\n                }\r\n            />\r\n            <MenuItem\r\n                text=\"Reset\"\r\n                icon=\"reset\"\r\n                onClick={() => resetBoard(false, true)}\r\n                intent=\"danger\"\r\n                labelElement={\r\n                    <span className=\"bp3-text-muted\">\r\n                        <Icon icon=\"key-shift\" />R\r\n                    </span>\r\n                }\r\n            />\r\n            <MenuDivider />\r\n            <MenuItem\r\n                text=\"View on GitHub\"\r\n                icon=\"code\"\r\n                labelElement={<Icon icon=\"arrow-top-right\" />}\r\n                href=\"https://github.com/diegoasanch/Game-of-life\"\r\n                target=\"_blank\"\r\n            />\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default BoardMenu\r\n","import { boardData, IBoard, ISavedBoard } from \"../../types/cells\";\r\n\r\nexport class Board implements IBoard {\r\n    public name = ''\r\n    public created = new Date()\r\n    public edited =  new Date()\r\n    public board_content: boardData = [[]]\r\n\r\n    constructor(loaded_board: ISavedBoard | null, board_content?: boardData, name?: string) {\r\n\r\n        if (loaded_board) {\r\n            console.log(`Creating board from: ${loaded_board}`)\r\n\r\n            this.name = loaded_board.name ?? 'undefined'\r\n            this.created = loaded_board.created ?? new Date()\r\n            this.edited =  loaded_board.edited ?? new Date()\r\n            this.board_content = loaded_board.board_content\r\n        }\r\n        else if (board_content) {\r\n            this.name = name ?? 'untitled_board'\r\n            this.created = new Date()\r\n            this.edited = new Date()\r\n            this.board_content = board_content\r\n        }\r\n    }\r\n\r\n    getRows() {\r\n        return this.board_content.length\r\n    }\r\n\r\n    getCols() {\r\n        return this.board_content[0].length\r\n    }\r\n}\r\n\r\n// export class Board {\r\n//     constructor() {\r\n//         console.log(\"Dummy board\")\r\n//     }\r\n// }\r\n","import { Position, Toaster } from '@blueprintjs/core'\r\n\r\nexport const AppToaster = Toaster.create({\r\n    className: \"recipe-toaster\",\r\n    position: Position.TOP\r\n})\r\n","import React, { useContext, useEffect, useState, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport Sidebar from '../../components/Sidebar'\r\nimport CellGrid from '../../components/CellGrid'\r\nimport { numInputCallback, SetNumValue } from '../../types/inputs'\r\nimport { boardData, ISavedBoard } from '../../types/cells'\r\nimport { ToggleCellState } from '../../context/game'\r\nimport { useInterval, useLocalStorage } from 'react-use';\r\nimport { CurrentTheme, ThemeContext } from '../../context/theme'\r\nimport { IthemeProp } from '../../types/styles'\r\nimport { nextCycle, deep_copy, createBoard, saveBoard, saved_label, getGameLink } from './gameFunctions'\r\nimport { ContextMenu2 } from \"@blueprintjs/popover2\";\r\nimport BoardMenu from '../../components/BoardMenu'\r\nimport { Intent, useHotkeys } from \"@blueprintjs/core\";\r\nimport { Board } from '../../components/Models/game'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { AppToaster } from '../../utils/toaster'\r\n\r\nconst PageContainer = styled.div<IthemeProp>`\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: ${props => props.theme.background};\r\n    color: ${props => props.theme.text};\r\n    display: flex;\r\n    flex-direction: row;\r\n`\r\nconst SideContainer = styled.div`\r\n    width: 270px;\r\n    z-index: 1;\r\n`\r\nconst MainContainer = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    height: 100%;\r\n`\r\nconst ResizedContextMenu = styled(ContextMenu2)`\r\n    height: 100vh;\r\n    width: 100vw;\r\n`\r\n\r\n\r\ntype IProps = {\r\n    fromStorage: boolean,\r\n    loadedBoard?: ISavedBoard,\r\n}\r\n\r\nconst Game = ({ fromStorage, loadedBoard }: IProps) => {\r\n\r\n    const theme = useContext(CurrentTheme)\r\n    const { isDark, toggleTheme } = useContext(ThemeContext)\r\n\r\n    const [colCount, setColCount] = useState(40)\r\n    const [rowCount, setRowCount] = useState(30)\r\n    const [content, setContent] = useState<boardData>()\r\n\r\n    const [speed, setSpeed] = useState(10)\r\n    const [isPlaying, setIsPlaying] = useState(false)\r\n    const [iterationCount, setIterationCount] = useState(0)\r\n    const [highlightNew, setHighlightNew] = useLocalStorage('highlightNew', false)\r\n    const history = useHistory()\r\n\r\n    const [name, setName] = useState('')\r\n\r\n    const handleColInput: numInputCallback = (valueAsNumber, valueAsString, innputElement) => {\r\n        setColCount(valueAsNumber)\r\n    }\r\n    const handleRowInput: numInputCallback = (valueAsNumber, valueAsString, innputElement) => {\r\n        setRowCount(valueAsNumber)\r\n    }\r\n    const handleSpeed: SetNumValue = (value) => {\r\n        setSpeed(value)\r\n    }\r\n\r\n    const toggleState = (col: number, row: number) : void => {\r\n        if (Array.isArray(content)) {\r\n            console.log(`Toggling cell: [${row}][${col}]`)\r\n            const copiedContent = deep_copy(content)\r\n\r\n            copiedContent[row][col].alive = !copiedContent[row][col].alive\r\n            setContent(copiedContent)\r\n        }\r\n    }\r\n\r\n    const iterateOnce = () => {\r\n        if (Array.isArray(content)) {\r\n            setContent(nextCycle(content))\r\n            setIterationCount(prev => prev + 1)\r\n        }\r\n    }\r\n\r\n    const initializeBoard = (rows: number, cols: number, random=false, heart=false) => {\r\n        setContent(createBoard(rows, cols, random, heart))\r\n        setIterationCount(0)\r\n    }\r\n\r\n    const resetBoard = (random=false, heart=false) => {\r\n        initializeBoard(rowCount, colCount, random, heart)\r\n    }\r\n\r\n    const togglePlaying = () => {\r\n        setIsPlaying(old => !old)\r\n    }\r\n    const toggleHighlightNew = () => {\r\n        setHighlightNew(old => !old)\r\n    }\r\n\r\n    const handleSave = () => {\r\n        if (name.length) {\r\n            console.log(`Saving... ${name}`)\r\n            saveBoard(new Board(null, content, name))\r\n            history.push(\"/\" + saved_label(name))\r\n            showToast(`Saved board: ${name}`, 'success')\r\n        }\r\n        else {\r\n            alert(\"Invalid name\")\r\n        }\r\n    }\r\n\r\n    const showToast = (message: string, intent?: Intent) => {\r\n        AppToaster.show({ message, intent })\r\n    }\r\n\r\n    const getShareableLink = () => {\r\n        const link = getGameLink(new Board(null, content, name))\r\n        navigator.clipboard.writeText(link)\r\n        showToast('Link copied to clipboard.', 'primary')\r\n    }\r\n\r\n    useEffect(() => {\r\n        initializeBoard(rowCount, colCount)\r\n    }, [rowCount, colCount])\r\n\r\n    useEffect(() => {\r\n        if (fromStorage) {\r\n            setContent(loadedBoard?.board_content)\r\n            setName(loadedBoard?.name ?? 'untitled_board')\r\n        }\r\n        else\r\n            initializeBoard(rowCount, colCount, false, true)\r\n    // eslint-disable-next-line\r\n    }, [fromStorage, loadedBoard?.board_content])\r\n\r\n    useInterval(() => {\r\n        iterateOnce()\r\n    }, isPlaying ? (1000 / speed) : null)\r\n\r\n    const hotkeys = useMemo(() => [\r\n        {\r\n            combo: 'p',\r\n            global: true,\r\n            label: \"Play\",\r\n            onKeyDown: togglePlaying\r\n        },\r\n        {\r\n            combo: 'right',\r\n            global: true,\r\n            label: \"Iterate once\",\r\n            onKeyDown: iterateOnce\r\n        },\r\n        {\r\n            combo: 'shift + n',\r\n            global: true,\r\n            label: \"Randomize cells\",\r\n            onKeyDown: () => resetBoard(true, false)\r\n        },\r\n        {\r\n            combo: 'shift + c',\r\n            global: true,\r\n            label: \"Clear board\",\r\n            onKeyDown: () => resetBoard(false, false)\r\n        },\r\n        {\r\n            combo: 'shift + r',\r\n            global: true,\r\n            label: \"Reset Board\",\r\n            onKeyDown: () => resetBoard(false, true)\r\n        },\r\n        {\r\n            combo: 'shift + l',\r\n            global: true,\r\n            label: \"Toggle theme\",\r\n            onKeyDown: toggleTheme\r\n        },\r\n        {\r\n            combo: 'shift + h',\r\n            global: true,\r\n            label: \"Toggle theme\",\r\n            onKeyDown: toggleHighlightNew\r\n        },\r\n        {\r\n            combo: 'shift + s',\r\n            global: true,\r\n            label: \"Save board\",\r\n            onKeyDown: handleSave\r\n        },\r\n        {\r\n            combo: 'shift + h',\r\n            global: true,\r\n            label: \"Share board\",\r\n            onKeyDown: getShareableLink\r\n        },\r\n    // eslint-disable-next-line\r\n    ], [content, isDark])\r\n\r\n    const { handleKeyDown, handleKeyUp } = useHotkeys(hotkeys)\r\n\r\n    return (\r\n        <div onKeyDown={handleKeyDown} onKeyUp={handleKeyUp}>\r\n            <ToggleCellState.Provider value={toggleState} >\r\n                <ResizedContextMenu content={\r\n                    <BoardMenu\r\n                        iterateOnce={iterateOnce}\r\n                        isPlaying={isPlaying}\r\n                        togglePlaying={togglePlaying}\r\n                        resetBoard={resetBoard}\r\n                        name={name}\r\n                        setName={setName}\r\n                        saveBoard={handleSave}\r\n                        share={getShareableLink}\r\n\r\n                    />\r\n                }>\r\n                    <PageContainer theme={theme}>\r\n                        <SideContainer>\r\n                            <Sidebar\r\n                                rows={rowCount}\r\n                                cols={colCount}\r\n                                setRows={handleRowInput}\r\n                                setCols={handleColInput}\r\n                                iterateOnce={iterateOnce}\r\n                                speed={speed}\r\n                                setSpeed={handleSpeed}\r\n                                isPlaying={isPlaying}\r\n                                togglePlaying={togglePlaying}\r\n                                resetBoard={resetBoard}\r\n                                iterationCount={iterationCount}\r\n                                isDark={isDark}\r\n                                toggleTheme={toggleTheme}\r\n                                highlightNew={!!highlightNew}\r\n                                toggleHighlightNew={toggleHighlightNew}\r\n                            />\r\n                        </SideContainer>\r\n\r\n                            <MainContainer>\r\n                                <CellGrid\r\n                                    rows={content}\r\n                                    highlightNew={!!highlightNew}\r\n                                />\r\n                        </MainContainer>\r\n                    </PageContainer>\r\n                </ResizedContextMenu>\r\n            </ToggleCellState.Provider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { ISavedBoard } from '../../types/cells'\r\nimport { AppToaster } from '../../utils/toaster'\r\nimport Game from '../Game'\r\nimport { getBoard } from '../Game/gameFunctions'\r\n\r\nconst default_saved_board: ISavedBoard = {\r\n    name: 'undefined',\r\n    created: new Date(),\r\n    edited: new Date(),\r\n    board_content: [[], []],\r\n}\r\n\r\ntype IUrlParams = {\r\n    name: string,\r\n}\r\n\r\nfunction SavedGame() {\r\n\r\n    const { name } = useParams<IUrlParams>()\r\n    const [savedBoard, setSavedBoard] = useState(default_saved_board)\r\n\r\n    useEffect(() => {\r\n        const from_localstorage = getBoard(name)\r\n        if (from_localstorage) {\r\n            setSavedBoard(from_localstorage)\r\n            AppToaster.show({ message: `Loaded board \"${name}\"`, intent: \"primary\"})\r\n        }\r\n        else\r\n            AppToaster.show({ message: `Couldn't load board \"${name}\"`, intent: \"danger\"})\r\n    }, [name])\r\n\r\n    return (\r\n        <Game fromStorage={true} loadedBoard={savedBoard} />\r\n    )\r\n}\r\n\r\nexport default SavedGame\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { ISavedBoard } from '../../types/cells'\r\nimport { AppToaster } from '../../utils/toaster'\r\nimport Game from '../Game'\r\nimport { hex_to_board } from '../Game/gameFunctions'\r\n\r\nconst default_saved_board: ISavedBoard = {\r\n    name: 'undefined',\r\n    created: new Date(),\r\n    edited: new Date(),\r\n    board_content: [[], []],\r\n}\r\n\r\ntype IUrlParams = {\r\n    dimensions: string,\r\n    content: string,\r\n}\r\nconst notifyInvalid = () => {\r\n    AppToaster.show({ message: 'Invalid board', intent: 'warning' })\r\n}\r\n\r\nfunction SharedGame() {\r\n\r\n    const { dimensions, content } = useParams<IUrlParams>()\r\n    const [savedBoard, setSavedBoard] = useState(default_saved_board)\r\n\r\n    const createBoard = (rows: number, cols: number, content: string) => {\r\n        let generated_board\r\n\r\n        if (rows && cols && content) {\r\n            generated_board = hex_to_board(rows, cols, content)\r\n            AppToaster.show({ message: `Loaded shared ${rows} x ${cols} board`, intent: \"primary\"})\r\n        }\r\n        else {\r\n            generated_board = default_saved_board\r\n            console.error(\"Invalid board\")\r\n            notifyInvalid()\r\n        }\r\n        setSavedBoard(generated_board)\r\n    }\r\n\r\n    useEffect(() => {\r\n        let parsed_rows = 0\r\n        let parsed_cols = 0\r\n\r\n        if (dimensions.includes('x')) {\r\n            const [str_rows, str_cols] = dimensions.split('x')\r\n            parsed_rows = parseInt(str_rows) || 0\r\n            parsed_cols = parseInt(str_cols) || 0\r\n        }\r\n        else if (dimensions.length && !isNaN(parseInt(dimensions))) {\r\n            const side = parseInt(dimensions)\r\n            parsed_rows = side\r\n            parsed_cols = side\r\n        }\r\n\r\n        console.log({ dimensions, parsed_rows, parsed_cols, content})\r\n        createBoard(parsed_rows, parsed_cols, content)\r\n\r\n    }, [dimensions, content])\r\n\r\n\r\n    return (\r\n        <Game fromStorage={true} loadedBoard={savedBoard} />\r\n    )\r\n}\r\n\r\nexport default SharedGame\r\n","import React from 'react';\nimport { dark, light } from './styles/colors'\nimport { CurrentTheme, ThemeContext } from './context/theme'\nimport Game from './pages/Game'\nimport styled from 'styled-components'\nimport { FocusStyleManager, HotkeysProvider } from \"@blueprintjs/core\"\nimport { useLocalStorage } from 'react-use'\nimport  {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\nimport SavedGame from './pages/SavedGame';\nimport SharedGame from './pages/SharedGame';\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\nconst Page = styled.div`\n  height: 100vh;\n  width: 100vw;\n`\n\nfunction App() {\n  const [isDark, setIsDark] = useLocalStorage('isDark', true)\n\n  const toggleTheme = () => {\n    setIsDark(!isDark)\n  }\n\n  return (\n    <HotkeysProvider>\n      <CurrentTheme.Provider value={isDark ? dark : light}>\n        <ThemeContext.Provider value={\n            {\n              isDark: !!isDark,\n              toggleTheme,\n            }\n        }>\n          <Page className={`.bp3-ui-text ${isDark ? 'bp3-dark' : ''}`}>\n\n            <Router>\n              <Switch>\n\n                <Route exact path=\"/saved/:name\">\n                  <SavedGame />\n                </Route>\n\n                <Route exact path=\"/shared/:dimensions/:content\">\n                  <SharedGame />\n                </Route>\n\n                <Route path=\"/\">\n                  <Game fromStorage={false} />\n                </Route>\n\n              </Switch>\n            </Router>\n\n          </Page>\n        </ThemeContext.Provider>\n      </CurrentTheme.Provider>\n    </HotkeysProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}