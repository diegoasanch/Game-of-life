{"version":3,"sources":["styles/colors.ts","context/genericContext.tsx","context/theme.ts","components/Sidebar/sections/Header.tsx","pages/Game/gameFunctions.ts","utils/toaster.ts","components/Models/game.ts","utils/url.ts","context/game.ts","components/Sidebar/sections/Footer.tsx","styles/sharedStyledComponents.tsx","components/SizeInput/SizeInput.tsx","components/SpeedInput/SpeedInput.tsx","components/Sidebar/sections/Settings.tsx","components/Sidebar/sections/SidebarSection.tsx","components/Sidebar/sections/SectionsContainer.tsx","components/Sidebar/Sidebar.tsx","components/Cell/Cell.tsx","components/CellGrid/CellGrid.tsx","components/BoardMenu/BoardMenu.tsx","pages/Game/Game.tsx","pages/SavedGame/SavedGame.tsx","pages/SharedGame/SharedGame.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dark","background","text","sidebar","cellBorder","cellAlive","cellDead","header","scrollBarBg","scrollBarThumb","light","buildGenericContext","getData","HookContext","createContext","children","comonData","Provider","value","useContext","useLocalStorage","isDark","setIsDark","useState","theme","setTheme","toggleTheme","useCallback","console","log","ThemeProvider","useThemeContext","StyledHeader","styled","H1","HeaderContainer","StyledSwitch","Switch","InlineIcon","Icon","Header","content","HeaderTooltip","position","Position","RIGHT","icon","intent","alignIndicator","Alignment","checked","onChange","innerLabel","innerLabelChecked","large","TooltipContent","div","className","packageJson","version","aliveNextCycle","board","row","col","ROWS","length","COLS","current","UP","DOWN","LEFT","HAS_RIGHT","HAS_DOWN","HAS_UP","HAS_LEFT","alive_neighbors","Number","alive","deep_copy","to_copy","JSON","parse","stringify","heartPattern","generateBoard","rows","cols","random","pattern","is_alive","generated","i","j","Math","round","parseInt","push","age","column","createBoard","heart","replaceAll","saved_label","name","getBoard","Promise","resolve","reject","window","localStorage","hasOwnProperty","board_string","getItem","parsed_board","created","Date","edited","board_content","undefined","AppToaster","Toaster","create","TOP","showToast","message","show","Board","loaded_board","this","bin_to_base64","bin","ascii","out","byte","substring","padEnd","String","fromCharCode","bin_to_ascii","btoa","getGameLink","getCols","getRows","board_to_bin","b64","location","host","pathname","new_hex","repeating","char","every","a","count","shorten_b64","base64ToBoard","b64Content","charCodeAt","toString","padStart","ascii_to_bin","atob","base64_to_bin","separator","indexOf","repetitions","repeat","unzip_b64","ToggleCellState","colCount","setColCount","rowCount","setRowCount","setContent","resetCheckpoint","setResetCheckpoint","speed","setSpeed","isPlaying","setIsPlaying","iterationCount","setIterationCount","highlightNew","setHighlightNew","setName","loadedBoard","setLoadedBoard","history","useHistory","iterateOnce","Array","isArray","new_state","current_cell","copied_data","nextCycle","prev","initializeBoard","useEffect","checkpoint","useInterval","toggleState","copiedContent","resetBoard","randomizeBoard","clearBoard","togglePlaying","old","toggleHighlightNew","handleSave","to_save","storage_key","formated_board","board_to_saved_format","serialized_board","setItem","saveBoard","alert","getShareableLink","link","navigator","clipboard","writeText","GameContextProvider","useGameContext","Count","span","Shoutout","H6","Stats","footer","props","Footer","href","target","rel","StyledDivider","Divider","SizeInput","maxValue","placeholder","handleInput","allowNumericCharactersOnly","min","max","onValueChange","fill","SpeedInput","setValue","labelStepSize","SettingsContainer","SizeInputRow","Settings","label","valueAsNumber","valueAsString","innputElement","onClick","rightIcon","event","disabled","StyledSectionTitle","StyledCollapse","Collapse","SidebarSection","startOpen","Component","isOpen","setIsOpen","StyledSectionsContainer","sidebarSections","minimal","SectionsContainer","map","section","Container","Sidebar","StyledCell","cellColor","Cell","cellData","toggleCell","color","getCellColor","Row","CellGrid","isLoading","size","index","cell","StyledForm","FormGroup","BoardMenu","share","labelElement","labelFor","labelInfo","id","autoFocus","PageContainer","SideContainer","MainContainer","ResizedContextMenu","ContextMenu2","Game","hotKeysConfig","useMemo","combo","global","onKeyDown","useGameHotkeysConfig","useHotkeys","handleKeyDown","handleKeyUp","onKeyUp","GameWrapper","default_saved_board","SavedGame","useParams","savedBoard","setSavedBoard","setIsLoading","fetchBoard","from_localstorage","SharedGame","dimensions","generated_board","Error","error","parsed_rows","parsed_cols","includes","split","str_rows","str_cols","isNaN","side","call_create","FocusStyleManager","onlyShowFocusOnTabs","Page","App","basename","exact","path","StyledComponentsThemeProvider","ThemedPageContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aafdbef5.chunk.js","sourcesContent":[" import { Itheme } from '../types/styles'\n\nexport const dark: Itheme = {\n    background: '#2F3437',\n    text: '#EBEBEB',\n    sidebar: '#151515',\n    cellBorder: '#000000',\n    cellAlive: '#0E0F1E',\n    cellDead: '#586268',\n    header: '#19A6FF',\n    scrollBarBg: '#4F585D',\n    scrollBarThumb: '#2F3437',\n}\nexport const light: Itheme = {\n    background: '#EBEBEB',\n    text: '#37352F',\n    sidebar: '#FFFFFF',\n    cellBorder: '#343434',\n    cellAlive: '#0E0F10',\n    cellDead: '#EEEEEE',\n    header: '#19A6FF',\n    scrollBarBg: '#EBEBEB',\n    scrollBarThumb: '#888888',\n}\n","import { Context, createContext, useContext } from 'react'\n\nexport const buildGenericContext = <T extends unknown>(\n\tgetData: () => T\n): [({ children }: any) => JSX.Element, () => T, Context<T>] => {\n\tconst HookContext = createContext<T>({} as T)\n\tconst provider = ({ children }: any) => {\n\t\tconst comonData = getData()\n\n\t\treturn <HookContext.Provider value={comonData}>{children}</HookContext.Provider>\n\t}\n\n\tconst useProviderContext = () => useContext(HookContext)\n\n\treturn [provider, useProviderContext, HookContext]\n}\n","import { useCallback, useState } from \"react\"\nimport { useLocalStorage } from \"react-use\"\nimport { dark, light } from \"../styles/colors\"\nimport { Itheme } from '../types/styles';\nimport { buildGenericContext } from './genericContext';\n\n\nconst useTheme = () => {\n    const [isDark, setIsDark] = useLocalStorage<boolean>('isDark', true)\n    const [theme, setTheme] = useState<Itheme>(dark)\n\n    const toggleTheme = useCallback(() => {\n        console.log(`Toggle theme`)\n\n        let newTheme: Itheme\n        if (!isDark)\n            newTheme = dark\n        else\n            newTheme = light\n\n        setTheme(newTheme)\n        setIsDark(!isDark)\n\n    }, [setIsDark, isDark, setTheme])\n\n    return { theme, isDark: !!isDark, toggleTheme }\n}\n\nexport const [ThemeProvider, useThemeContext] = buildGenericContext(useTheme)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Alignment, H1, Icon, Position, Switch } from '@blueprintjs/core'\nimport packageJson from '../../../../package.json'\nimport { Tooltip2 } from '@blueprintjs/popover2'\nimport { useThemeContext } from '../../../context/theme'\n\nconst StyledHeader = styled(H1)`\n    font-size: 3.5em !important;\n    line-height: .9em !important;\n    font-weight: bold;\n    align-self: flex-start;\n`\nconst HeaderContainer = styled.header`\n    position: relative;\n    width: 100%;\n`\nconst StyledSwitch = styled(Switch)`\n    position: absolute;\n    bottom: 0;\n    right: 0;\n`\nconst InlineIcon = styled(Icon)`\n    display: inline-block;\n    vertical-align: super;\n    margin-left: .2em;\n`\n\nexport const Header = () => {\n    const { isDark, toggleTheme } = useThemeContext()\n    return (\n        <HeaderContainer>\n            <Tooltip2 content={HeaderTooltip} position={Position.RIGHT}>\n                <StyledHeader>\n                    Game <br/>\n                    of <br/>\n                    Life\n                    <InlineIcon icon=\"info-sign\" intent=\"primary\"/>\n                </StyledHeader>\n            </Tooltip2>\n            <StyledSwitch\n                alignIndicator={Alignment.RIGHT}\n                checked={isDark}\n                onChange={toggleTheme}\n                innerLabel=\"🌞\"\n                innerLabelChecked=\"🌚\"\n                large\n            />\n        </HeaderContainer>\n    )\n}\n\nconst TooltipContent = styled.div`\n    width: 40vw;\n    max-width: 1000px;\n    min-width: 500px;\n    padding: 1em;\n`\nconst HeaderTooltip = (\n    <TooltipContent>\n        <h1>Conway's Game of Life <span className=\"bp3-text-muted\"> - v{packageJson.version}</span></h1>\n        <p>\n            &emsp; Is a <strong>cellular automaton</strong> devised by the\n            British mathematician John\n            Horton Conway in 1970. It is a zero-player game, meaning that its\n            evolution is determined by its initial state, requiring no further\n            input.<br/>\n            &emsp; One interacts with the Game of Life by creating an initial\n            configuration and observing how it evolves.\n\n        </p>\n        <h2>How to play?</h2>\n        <p>\n            &emsp; Click on a cell to change its state. Change as many cells as you want and\n            press <strong><Icon icon=\"play\"/> Play</strong>!\n            <br/>\n            &emsp; Alternatively, click the <strong><Icon icon=\"step-forward\"/> Step by step </strong>\n            button to evolve the board one cycle at a time.\n        </p>\n        <h2>Rules</h2>\n        <ul>\n            <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation.</li>\n            <li>Any live cell with two or three live neighbours lives on to the next generation.</li>\n            <li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li>\n            <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\n        </ul>\n    </TooltipContent>\n)\n","import { boardData, IBoard, ISavedBoard } from '../../types/cells'\n\nexport const aliveNextCycle = (board: boardData, row: number, col: number): boolean => {\n    const ROWS = board.length;\n    const COLS = board[0].length;\n    const current = board[row][col]\n\n    const UP = row - 1\n    const DOWN = row + 1\n    const LEFT = col - 1\n    const RIGHT = col + 1\n\n    const HAS_RIGHT = RIGHT < COLS\n    const HAS_DOWN = DOWN < ROWS\n    const HAS_UP = UP >= 0\n    const HAS_LEFT = LEFT >= 0\n\n    const top_left = (HAS_LEFT && HAS_UP) ? Number(board[UP][LEFT].alive) : 0;\n    const top_center = HAS_UP ? Number(board[UP][col].alive) : 0;\n    const top_right = (HAS_RIGHT && HAS_UP) ? Number(board[UP][RIGHT].alive) : 0;\n    const center_left = HAS_LEFT ? Number(board[row][LEFT].alive) : 0;\n    const center_right = HAS_RIGHT ? Number(board[row][RIGHT].alive) : 0;\n    const bottom_left = (HAS_LEFT && HAS_DOWN) ? Number(board[DOWN][LEFT].alive) : 0;\n    const bottom_center = HAS_DOWN ? Number(board[DOWN][col].alive) : 0;\n    const bottom_right = (HAS_DOWN && HAS_RIGHT) ? Number(board[DOWN][RIGHT].alive) : 0;\n\n    const alive_neighbors = (top_left + top_center + top_right + center_left + center_right + bottom_left + bottom_center + bottom_right)\n    return (alive_neighbors === 3) || (current.alive && alive_neighbors === 2)\n}\n\nexport const nextCycle = (board: boardData) : boardData => {\n    const copied_data = deep_copy(board) // copy the board\n    let i\n    let j\n\n    const rows = board.length;\n    const cols = board[0].length;\n    let new_state\n    let current_cell\n\n    for (i = 0; i < rows; i++) {\n        for (j = 0; j < cols; j++) {\n            new_state = aliveNextCycle(board, i, j)\n            current_cell = copied_data[i][j]\n            current_cell.alive = new_state\n\n            if (new_state) {\n                current_cell.age += 1\n            }\n            else {\n                current_cell.age = 0\n            }\n        }\n    }\n    return copied_data\n}\n\nexport const deep_copy = (to_copy: any): any => {\n    return JSON.parse(JSON.stringify(to_copy))\n}\n\n\nconst heartPattern: string = `\n0000000000000000000000000100000000000000\n0000000000000000000000000000000100000000\n0000000000100000000000010000000100000000\n0001100011000000100000000000000100000110\n0000100001000000010000000000000000000010\n0000000000000000001000000000000000000000\n0000000000000000000000000000000000000000\n0000000000000000000000000000000001000000\n0000000000000000000000000010000000000000\n0000000000000000000000000000000000000000\n0000000000000000011000110000000000000000\n0000000000000000111101111000000000000000\n0001100000000001111111111100000000000000\n0011000000000001111111111100000000000000\n0010000000000000111111111000000011000001\n0000000000000000011111110000000000000000\n0000100001000000001111100000000000000010\n0000100001001000000111000000000000000010\n0000100001011100000010000000000000000010\n0000000000110000000000000000000000000000\n0000000000000000000000000000000000000000\n0000000000000000000000000000000000000000\n0000000000000000000000000010000000000000\n0000000000000000000000000111000000000000\n0000000000000000000000000010000100000000\n0000011100001110000000000000000010000000\n0000000000000010000000000000000001000000\n0000000000000000000000000000000000000000\n0000000000000000000000110000000011000000\n1000010000000000000000100000000001100000\n`\n\nexport const generateBoard = (rows: number, cols: number, random?: boolean, pattern?: string): boardData => {\n    const generated = []\n    let row;\n    let is_alive\n\n    for (let i = 0; i < rows; i++) {\n        row = []\n        for (let j = 0; j < cols; j++) {\n            if (random)\n                is_alive = !!(Math.round(Math.random()))\n            else if (pattern?.length)\n                is_alive = !!parseInt(pattern[(i * cols) + j])\n            else\n                is_alive = false;\n\n            row.push({\n                alive: is_alive,\n                age: 0,\n                row: i,\n                column: j\n            })\n        }\n        generated.push(row)\n    }\n    return generated\n}\n\nexport const createBoard = (rows: number, cols: number, random: boolean, heart=false): boardData  => {\n    const pattern = heartPattern.replaceAll('\\n', '')\n    if (heart)\n        return generateBoard(rows, cols, random, pattern)\n    return generateBoard(rows, cols, random)\n}\n\nexport const saved_label = (name: string): string => `saved/${name.replaceAll(' ', '_')}`\n\n\nexport const board_to_saved_format = (to_save: IBoard): ISavedBoard => (\n    {\n        name: to_save.name,\n        created: to_save.created,\n        edited: to_save.edited,\n        board_content: to_save.board_content,\n    }\n)\n\nexport const saveBoard = (to_save: IBoard): void => {\n    const storage_key = saved_label(to_save.name)\n\n    if (window.localStorage.hasOwnProperty(storage_key)) {\n        to_save.edited = new Date();\n    }\n    const formated_board = board_to_saved_format(to_save)\n    const serialized_board = JSON.stringify(formated_board)\n\n    window.localStorage.setItem(storage_key, serialized_board)\n}\n\nexport const getBoard = (name: string): Promise<ISavedBoard | undefined> => {\n\n    return new Promise((resolve, reject) => {\n        if (window.localStorage.hasOwnProperty(saved_label(name))) { // saved entry\n            const board_string = window.localStorage.getItem(saved_label(name)) ?? '{}'\n            const parsed_board = JSON.parse(board_string)\n            const default_content: boardData = [[]]\n\n            const loaded_board: ISavedBoard = {\n                name: parsed_board.name ?? 'undefined',\n                created: parsed_board.created ?? new Date(),\n                edited: parsed_board.edited ?? new Date(),\n                board_content: parsed_board.board_content ?? default_content,\n            }\n            return resolve(loaded_board)\n        }\n        return resolve(undefined)\n    })\n\n}\n","import { Position, Toaster, Intent } from '@blueprintjs/core'\n\nexport const AppToaster = Toaster.create({\n    className: \"recipe-toaster\",\n    position: Position.TOP\n})\n\nexport const showToast = (message: string, intent?: Intent) => {\n    AppToaster.show({ message, intent })\n}\n","import { boardData, IBoard, ISavedBoard } from \"../../types/cells\";\n\nexport class Board implements IBoard {\n    public name = ''\n    public created = new Date()\n    public edited =  new Date()\n    public board_content: boardData = [[]]\n\n    constructor(loaded_board: ISavedBoard | null, board_content?: boardData, name?: string) {\n\n        if (loaded_board) {\n            console.log(`Creating board from: ${loaded_board}`)\n\n            this.name = loaded_board.name ?? 'undefined'\n            this.created = loaded_board.created ?? new Date()\n            this.edited =  loaded_board.edited ?? new Date()\n            this.board_content = loaded_board.board_content\n        }\n        else if (board_content) {\n            this.name = name ?? 'untitled_board'\n            this.created = new Date()\n            this.edited = new Date()\n            this.board_content = board_content\n        }\n    }\n\n    getRows() {\n        return this.board_content.length\n    }\n\n    getCols() {\n        return this.board_content[0].length\n    }\n}\n\n// export class Board {\n//     constructor() {\n//         console.log(\"Dummy board\")\n//     }\n// }\n","import { boardData, IBoard, ISavedBoard } from \"../types/cells\"\nimport { generateBoard } from '../pages/Game/gameFunctions'\n\nconst board_to_bin = (content: boardData): string => {\n    let bin = ''\n\n    for (let row of content) {\n        for (let col of row) {\n            bin += col.alive ? '1' : '0'\n        }\n    }\n    return bin\n}\n\nconst bin_to_ascii = (bin: string): string => {\n    let out = ''\n    let byte = ''\n\n    for (let i = 0; i < bin.length; i += 8) {\n        byte = bin.substring(i, i + 8).padEnd(8, '0')\n        out += String.fromCharCode(parseInt(byte, 2))\n    }\n    return out\n}\n\nconst bin_to_base64 = (bin: string): string => {\n    const ascii = bin_to_ascii(bin)\n    const b64 = btoa(ascii).replaceAll('/', '_')\n    return b64\n}\n\nconst shorten_b64 = (b64: string): string => {\n    let new_hex = ''\n    let current = ''\n    let next = ''\n    let repeating = false\n\n    for (let char = 0; char < b64.length; char++) {\n        current = b64[char]\n        next = (char < b64.length - 1) ? b64[char + 1] : ''\n\n        if ([current, next].every(a => a === 'A')) {\n            let count = 0\n            repeating = true\n\n            while (repeating && char < b64.length) {\n                count++\n                repeating = b64[++char] === current\n            }\n            new_hex += `&${count};`\n            char--\n        }\n        else {\n            new_hex += current\n        }\n    }\n    return new_hex\n}\n\nconst unzip_b64 = (b64: string): string => {\n    let out = ''\n    for (let i = 0; i < b64.length; i++) {\n        if (b64[i] !== '&')\n            out += b64[i]\n        else {\n            const separator = b64.indexOf(';', i);\n            const repetitions = parseInt(b64.substring(i+1, separator))\n            i = separator\n            out += 'A'.repeat(repetitions)\n        }\n    }\n    return out\n}\nconst ascii_to_bin = (ascii: string): string => {\n    let out = ''\n    let char = ''\n\n    for (let i = 0; i < ascii.length; i++) {\n        char = (ascii[i].charCodeAt(0)).toString(2).padStart(8, '0')\n        out += char\n    }\n    return out\n}\n\nconst base64_to_bin = (b64: string): string => {\n    const ascii = atob(b64.replaceAll('_', '/'))\n    const bin = ascii_to_bin(ascii)\n    return bin\n}\n\nexport const getGameLink = (board: IBoard): string => {\n    const cols = board.getCols()\n    const rows = board.getRows()\n\n    const bin = board_to_bin(board.board_content)\n    const b64 = bin_to_base64(bin)\n\n    const { host, pathname } = window.location\n    return host + pathname + `#/shared/${rows}x${cols}/${shorten_b64(b64)}`\n}\n\nexport const base64ToBoard = (rows: number, cols: number, b64Content: string): ISavedBoard => {\n    const b64 = unzip_b64(b64Content)\n    const bin = base64_to_bin(b64)\n\n    // console.log(`Zipped: ${b64Content} \\n\\n\\n Hex: ${b64}\\n\\n\\nBinary: ${bin}`)\n\n    const content = generateBoard(rows, cols, false, bin)\n    const board: ISavedBoard = {\n        name: 'Shared board',\n        created: new Date(),\n        edited: new Date(),\n        board_content: content,\n    }\n\n    return board\n}\n","import { createContext, useEffect, useMemo, useState } from 'react'\nimport { useInterval, useLocalStorage } from 'react-use'\nimport { createBoard, deep_copy, nextCycle, saveBoard, saved_label } from '../pages/Game/gameFunctions'\nimport { boardData, ISavedBoard } from '../types/cells';\nimport { showToast } from '../utils/toaster'\nimport { HotkeyConfig } from '@blueprintjs/core';\nimport { Board } from '../components/Models/game'\nimport { useHistory } from 'react-router-dom';\nimport { getGameLink } from '../utils/url'\nimport { useThemeContext } from './theme'\nimport { buildGenericContext } from './genericContext';\n\nexport const ToggleCellState = createContext((col: number, row: number) => {console.log('Not yet configured')})\n\nexport const useGame = () => {\n    const [colCount, setColCount] = useState(40)\n    const [rowCount, setRowCount] = useState(30)\n    const [content, setContent] = useState<boardData>()\n    const [resetCheckpoint, setResetCheckpoint] = useState<boardData>()\n    const [speed, setSpeed] = useState(10)\n    const [isPlaying, setIsPlaying] = useState(false)\n    const [iterationCount, setIterationCount] = useState(0)\n    const [highlightNew, setHighlightNew] = useLocalStorage('highlightNew', false)\n    const [name, setName] = useState('')\n    const [loadedBoard, setLoadedBoard] = useState<ISavedBoard>()\n    const history = useHistory()\n\n    const toggleState = (col: number, row: number) : void => {\n        if (Array.isArray(content)) {\n            console.log(`Toggling cell: [${row}][${col}]`)\n            const copiedContent = deep_copy(content)\n\n            copiedContent[row][col].alive = !copiedContent[row][col].alive\n            setContent(copiedContent)\n        }\n    }\n\n    const iterateOnce = () => {\n        if (Array.isArray(content)) {\n            setContent(nextCycle(content))\n            setIterationCount(prev => prev + 1)\n        }\n    }\n\n    const initializeBoard = (rows: number, cols: number, random=false, heart=false) => {\n        setContent(createBoard(rows, cols, random, heart))\n        setIterationCount(0)\n    }\n\n    const resetBoard = () => {\n        setContent(resetCheckpoint)\n        setIterationCount(0)\n        showToast('Reset board', 'primary') // TODO: maybe use this in the game and leave only logic here\n    }\n\n    const randomizeBoard = () => {\n        initializeBoard(rowCount, colCount, true, false)\n        showToast('Randomized cells', 'primary') // TODO: Same with this toast\n    }\n    const clearBoard = () => {\n        initializeBoard(rowCount, colCount, false, false)\n        showToast('Cleared board', 'primary')\n    }\n\n    const togglePlaying = () => {\n        setIsPlaying(old => !old)\n    }\n    const toggleHighlightNew = () => {\n        setHighlightNew(!highlightNew)\n    }\n\n    const handleSave = () => {\n        if (name.length) {\n            console.log(`Saving... ${name}`)\n            saveBoard(new Board(null, content, name))\n            history.push(\"/\" + saved_label(name))\n            showToast(`Saved board: ${name}`, 'success')\n        }\n        else {\n            alert(\"Invalid name\")\n        }\n    }\n\n    const getShareableLink = () => {\n        const link = getGameLink(new Board(null, content, name))\n        navigator.clipboard.writeText(link)\n        showToast('Link copied to clipboard.', 'primary')\n    }\n\n    useEffect(() => {\n        let checkpoint: boardData | undefined;\n\n        if (loadedBoard) {\n            setContent(loadedBoard.board_content)\n            setName(loadedBoard.name)\n            checkpoint = loadedBoard.board_content\n        }\n        else {\n            console.log('Initialize heart board')\n            initializeBoard(rowCount, colCount, false, true)\n            checkpoint = createBoard(rowCount, colCount, false, true)\n        }\n        setResetCheckpoint(checkpoint)\n    }, [rowCount, colCount, loadedBoard])\n\n    useInterval(() => {\n        iterateOnce()\n    }, isPlaying ? (1000 / speed) : null)\n\n    return {\n        colCount, setColCount,\n        rowCount, setRowCount,\n        content, setContent,\n        resetCheckpoint, setResetCheckpoint,\n        speed, setSpeed,\n        isPlaying, setIsPlaying,\n        iterationCount, setIterationCount,\n        highlightNew: !!highlightNew, setHighlightNew,\n        name, setName,\n        toggleState,\n        iterateOnce,\n        resetBoard,\n        randomizeBoard,\n        clearBoard,\n        togglePlaying,\n        toggleHighlightNew,\n        handleSave,\n        getShareableLink,\n        initializeBoard,\n        loadedBoard, setLoadedBoard\n    }\n}\n\nexport const [GameContextProvider, useGameContext] = buildGenericContext(useGame)\n\nexport const useGameHotkeysConfig = () => {\n    const {\n        togglePlaying,\n        iterateOnce,\n        randomizeBoard,\n        clearBoard,\n        resetBoard,\n        toggleHighlightNew,\n        handleSave,\n        getShareableLink,\n        highlightNew,\n    } = useGameContext()\n\n    const { toggleTheme } = useThemeContext()\n\n    const hotkeysConfig = useMemo<HotkeyConfig[]>(() => ([\n        {\n            combo: 'p',\n            global: true,\n            label: \"Play\",\n            onKeyDown: togglePlaying\n        },\n        {\n            combo: 'right',\n            global: true,\n            label: \"Iterate once\",\n            onKeyDown: iterateOnce\n        },\n        {\n            combo: 'shift + n',\n            global: true,\n            label: \"Randomize cells\",\n            onKeyDown: randomizeBoard\n        },\n        {\n            combo: 'shift + c',\n            global: true,\n            label: \"Clear board\",\n            onKeyDown: clearBoard\n        },\n        {\n            combo: 'shift + r',\n            global: true,\n            label: \"Reset Board\",\n            onKeyDown: resetBoard\n        },\n        {\n            combo: 'shift + l',\n            global: true,\n            label: \"Toggle theme\",\n            onKeyDown: toggleTheme\n        },\n        {\n            combo: 'shift + h',\n            global: true,\n            label: \"Toggle theme\",\n            onKeyDown: toggleHighlightNew\n        },\n        {\n            combo: 'shift + s',\n            global: true,\n            label: \"Save board\",\n            onKeyDown: handleSave\n        },\n        {\n            combo: 'shift + d',\n            global: true,\n            label: \"Share board\",\n            onKeyDown: getShareableLink\n        },\n    // eslint-disable-next-line\n    ]), [\n        togglePlaying,\n        iterateOnce,\n        randomizeBoard,\n        clearBoard,\n        resetBoard,\n        toggleHighlightNew,\n        handleSave,\n        getShareableLink,\n        highlightNew,\n        toggleTheme\n    ])\n\n    return hotkeysConfig\n}\n","import React from 'react'\nimport { H4, H6 } from '@blueprintjs/core'\nimport styled from 'styled-components'\nimport { useGameContext } from '../../../context/game'\nimport { dark } from '../../../styles/colors'\n\nconst Count = styled.span`\n    color: ${dark.header};\n`\n\nconst Shoutout = styled(H6)`\n    font-size: .9em !important;\n\n    a &:not(:hover) {\n        color: inherit;\n    }\n`\n\nconst Stats = styled.footer`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-self: end;\n    margin-top: 8px;\n    width: 100%;\n    background-color: ${props => props.theme.sidebar};\n`\n\nexport const Footer = () => {\n    const { iterationCount } = useGameContext()\n    return (\n        <Stats>\n            <H4>Iteration count: <Count>{iterationCount}</Count></H4>\n            <Shoutout className=\"bp3-text-muted\">\n                Made with 💖 by&nbsp;\n                <a href=\"https://github.com/diegoasanch\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    Diego.\n                </a>\n            </Shoutout>\n\n        </Stats>\n    )\n}\n","import { Divider } from \"@blueprintjs/core\";\nimport styled from \"styled-components\";\n\nexport const StyledDivider = styled(Divider)`\n    width: 100%;\n`\n","import React from 'react'\nimport {  NumericInput } from \"@blueprintjs/core\";\nimport { numInputCallback } from '../../types/inputs'\n\ninterface Iprops {\n    value: number,\n    maxValue: number | undefined,\n    placeholder: string,\n    handleInput: numInputCallback,\n}\n\nconst SizeInput = ({ value, maxValue, placeholder, handleInput }: Iprops) => {\n\n    return (\n        <NumericInput\n            allowNumericCharactersOnly={false}\n            min={0}\n            max={maxValue}\n            onValueChange={handleInput}\n            placeholder={placeholder}\n            value={value}\n            fill\n        />\n    )\n}\n\nexport default SizeInput\n","import React from 'react'\nimport { Slider } from \"@blueprintjs/core\";\nimport { SetNumValue } from '../../types/inputs'\n\ninterface Iprops {\n    value: number,\n    setValue: SetNumValue,\n}\n\n\nconst SpeedInput = ({ value, setValue }: Iprops) => {\n    return (\n        <Slider\n            value={value}\n            onChange={setValue}\n            max={30}\n            labelStepSize={4}\n            min={1}\n        />\n    )\n}\n\nexport default SpeedInput\n","import { Alignment, Button, ButtonGroup, Label, Position, Switch } from \"@blueprintjs/core\"\nimport { Tooltip2 } from \"@blueprintjs/popover2\"\nimport styled from \"styled-components\"\nimport { useGameContext } from \"../../../context/game\"\nimport { numInputCallback, SetNumValue } from \"../../../types/inputs\"\nimport SizeInput from \"../../SizeInput\"\nimport SpeedInput from \"../../SpeedInput\"\n\nconst SettingsContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n\n    > * {\n        margin: .5em 0;\n    }\n`\n\nconst SizeInputRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    justify-items: center;\n    align-items: center;\n\n    > * {\n        padding: 0 5%;\n    }\n`\n\nexport const Settings = () => {\n    const {\n        rowCount,\n        colCount,\n        setRowCount,\n        setColCount,\n        iterateOnce,\n        speed,\n        setSpeed,\n        isPlaying,\n        togglePlaying,\n        resetBoard,\n        randomizeBoard,\n        clearBoard,\n        highlightNew,\n        toggleHighlightNew,\n    } = useGameContext()\n\n    const handleColInput: numInputCallback = (valueAsNumber, valueAsString, innputElement) => {\n        setColCount(valueAsNumber)\n    }\n    const handleRowInput: numInputCallback = (valueAsNumber, valueAsString, innputElement) => {\n        setRowCount(valueAsNumber)\n    }\n    const handleSpeed: SetNumValue = (value) => {\n        setSpeed(value)\n    }\n    const handleClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n        iterateOnce()\n    }\n\n    return (\n        <SettingsContainer>\n                <Switch\n                    alignIndicator={Alignment.RIGHT}\n                    checked={highlightNew}\n                    onChange={toggleHighlightNew}\n                    label=\"Highlight new cells\"\n                    // large\n                />\n                <SizeInputRow>\n                    <Label>\n                        Rows\n                        <SizeInput\n                            value={rowCount}\n                            maxValue={250}\n                            placeholder=\"Row count\"\n                            handleInput={handleRowInput}\n                        />\n                    </Label>\n                    <Label>\n                        Columns\n                        <SizeInput\n                            value={colCount}\n                            maxValue={250}\n                            placeholder=\"Column count\"\n                            handleInput={handleColInput}\n                        />\n                    </Label>\n                </SizeInputRow>\n                <Label>\n                    Iteration Speed\n                    <span className=\"bp3-text-muted\"> (Hz)</span>\n                    <SpeedInput\n                        value={speed}\n                        setValue={handleSpeed}\n                    />\n                </Label>\n\n                <ButtonGroup large>\n                    <Tooltip2 content={`${isPlaying ? 'Stop': 'Start'} iterating`} position={Position.TOP}>\n                        <Button\n                            text={isPlaying ? \"Pause\" : \"Play\"}\n                            icon={isPlaying ? \"pause\" : \"play\"}\n                            intent=\"primary\"\n                            onClick={togglePlaying}\n                        />\n                    </Tooltip2>\n                    <Tooltip2 content=\"Step-by-step\" position={Position.TOP}>\n                        <Button\n                            rightIcon=\"step-forward\"\n                            onClick={handleClick}\n                            disabled={isPlaying}\n                        />\n                    </Tooltip2>\n\n                </ButtonGroup>\n                <ButtonGroup>\n                    <Tooltip2 content=\"Reset board\" position={Position.TOP}>\n                        <Button\n                            onClick={resetBoard}\n                            icon=\"reset\"\n                            intent=\"danger\"\n                        />\n                    </Tooltip2>\n                    <Tooltip2 content=\"Clear board\" position={Position.TOP}>\n                        <Button\n                            onClick={clearBoard}\n                            icon=\"eraser\"\n                        />\n                    </Tooltip2>\n                    <Tooltip2 content=\"Randomize cells\" position={Position.TOP}>\n                        <Button\n                            text=\"Random\"\n                            onClick={randomizeBoard}\n                            icon=\"random\"\n                        />\n                    </Tooltip2>\n                </ButtonGroup>\n            </SettingsContainer>\n    )\n}\n","import { Collapse, Icon } from '@blueprintjs/core'\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\n\nconst StyledSectionTitle = styled.div`\n    display: flex;\n    align-items: center;\n    height: 3em;\n`\n\nexport type SidebarSectionProps = {\n    name: string\n    startOpen: boolean\n    Component: React.ReactNode\n}\n\nconst StyledCollapse = styled(Collapse)`\n    padding-left: .5em;\n`\n\nexport const SidebarSection = ({ name, startOpen, Component }: SidebarSectionProps) => {\n    const [isOpen, setIsOpen] = useState(startOpen)\n\n    const toggleOpen = () => {\n        setIsOpen(prev => !prev)\n    }\n\n    return (\n        <section>\n            <StyledSectionTitle onClick={toggleOpen}>\n                <h3>\n                    <Icon icon={isOpen ? 'chevron-down' : 'chevron-right'} />\n                    <code>{name}</code>\n                </h3>\n            </StyledSectionTitle>\n            <StyledCollapse isOpen={isOpen}>\n                { Component }\n            </StyledCollapse>\n        </section>\n    )\n}\n","import React from 'react'\nimport { Tag } from \"@blueprintjs/core\"\nimport styled from \"styled-components\"\nimport { Settings } from \"./Settings\"\nimport { SidebarSection, SidebarSectionProps } from \"./SidebarSection\"\n\nconst StyledSectionsContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    overflow-y: scroll;\n    padding-right: 2px;\n\n    &::-webkit-scrollbar {\n        background-color: ${props => props.theme.sidebar};\n        width: 7px;\n        border-radius: 3px;\n    }\n    &::-webkit-scrollbar-thumb {\n        background-color: ${props => props.theme.scrollBarBg};\n        border-radius: 3px;\n    }\n    &:hover::-webkit-scrollbar {\n        background-color: ${props => props.theme.scrollBarBg};\n    }\n    &:hover::-webkit-scrollbar-thumb {\n        background-color: ${props => props.theme.scrollBarThumb};\n    }\n`\n\nconst sidebarSections: SidebarSectionProps[] = [\n    {\n        name: 'Settings',\n        startOpen: true,\n        Component: <Settings />,\n    },\n    {\n        name: 'Saved Boards',\n        startOpen: false,\n        Component: <Tag large minimal>Coming soon...</Tag>,\n    },\n]\n\nexport const SectionsContainer = () => {\n    return (\n        <StyledSectionsContainer>\n            { sidebarSections.map(section => (\n                <SidebarSection {...section} />\n            ))}\n        </StyledSectionsContainer>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Header } from './sections/Header';\nimport { Footer } from './sections/Footer';\nimport { StyledDivider } from '../../styles/sharedStyledComponents';\nimport { SectionsContainer } from './sections/SectionsContainer';\n\nconst Container = styled.div`\n    position: relative;\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    background-color: ${props => props.theme.sidebar};\n    padding: 8px;\n    align-items: center;\n    justify-content: space-around;\n`\n\nconst Sidebar = () => {\n    return (\n        <Container>\n            <Header />\n            <StyledDivider />\n            <SectionsContainer />\n            <StyledDivider />\n            <Footer />\n        </Container>\n    )\n}\n\nexport default Sidebar\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { cellContent } from '../../types/cells'\nimport { ToggleCellState } from '../../context/game'\nimport { useThemeContext } from '../../context/theme'\n\ntype StyledCellProps = {\n    cellColor: string\n}\n\nconst StyledCell = styled.div<StyledCellProps>`\n    height: 20px;\n    width: 20px;\n    background-color: ${props => props.cellColor };\n    border: solid 1px ${props => props.theme.cellBorder};\n`\n\ntype CellProps = {\n    cellData: cellContent,\n    highlightNew: boolean,\n}\n\nconst Cell = ({ cellData, highlightNew }: CellProps ) => {\n    const toggleCell = useContext(ToggleCellState)\n    const { theme } = useThemeContext()\n\n    const handleClick = () => {\n        toggleCell(cellData.column, cellData.row)\n    }\n\n    const getCellColor = () : string => {\n        let color : string = theme.cellDead\n\n        if (cellData.alive) {\n            if (cellData.age === 1 && highlightNew)\n                color = theme.header\n            else\n                color = theme.cellAlive\n        }\n        return color\n    }\n\n    return (\n        <StyledCell\n            cellColor={getCellColor()}\n            onClick={handleClick}\n        />\n    )\n}\n\nexport default Cell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { H1, Spinner } from '@blueprintjs/core'\nimport Cell from '../Cell'\nimport { useGameContext } from '../../context/game'\n\nconst Container = styled.div`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    overflow: scroll;\n    height: 100%;\n    width: 100%;\n    justify-content: center;\n\n    &::-webkit-scrollbar {\n        background-color: ${props => props.theme.scrollBarBg};\n        width: 10px;\n        height: 10px;\n    }\n    &::-webkit-scrollbar-thumb {\n        background-color: ${props => props.theme.scrollBarThumb};\n    }\n`\nconst Row = styled.div`\n    display: flex;\n    flex-direction: row;\n    margin: 0;\n`\n\ninterface Iprops {\n    isLoading: boolean\n}\n\nconst CellGrid = ({ isLoading }: Iprops) => {\n    const {\n        content: rows,\n        highlightNew\n    } = useGameContext()\n\n    return (\n        <Container>\n            { isLoading &&\n                <>\n                    <H1>Loading...</H1>\n                    <br />\n                    <Spinner size={80} intent=\"primary\"/>\n                </>\n            }\n            { !isLoading && rows?.length && rows[0].length ?\n                ( rows.map((row, index) => (\n                    <Row key={`row_${index}`}>\n                        { row.map( cell => (\n                            <Cell\n                                key={`cell_${cell.row}_${cell.column}`}\n                                cellData={cell}\n                                highlightNew={highlightNew}\n                            />\n                        ))}\n                    </Row>\n                )))\n                :\n                <H1>Not enough cells to display 😢</H1>\n            }\n        </Container>\n    )\n}\n\nexport default CellGrid\n","import React from 'react'\nimport { Menu, MenuItem, MenuDivider, Icon, InputGroup, FormGroup, Button } from \"@blueprintjs/core\";\nimport styled from 'styled-components';\nimport { useGameContext } from '../../context/game';\n\nconst StyledForm = styled(FormGroup)`\n    padding: 0 0 5px 5px;\n    width: calc(100% - 10px);\n    margin: 0;\n\n    .save-btn {\n        margin-top: 5px;\n    }\n`\n\nconst BoardMenu = () => {\n\n    const {\n        iterateOnce,\n        isPlaying,\n        togglePlaying,\n        resetBoard,\n        randomizeBoard,\n        clearBoard,\n        name,\n        setName,\n        handleSave: saveBoard,\n        getShareableLink: share\n    } = useGameContext()\n\n    const handleNameChange = (event: React.FormEvent<HTMLElement>) => {\n        // console.log({changed_name})\n        setName((event.target as HTMLInputElement).value)\n    }\n\n    return (\n        <Menu>\n            <MenuItem\n                text={isPlaying ? \"Pause\" : \"Play\"}\n                icon={isPlaying ? \"pause\" : \"play\"}\n                onClick={togglePlaying}\n                intent=\"primary\"\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        P\n                    </span>\n                }\n            />\n            <MenuItem\n                text=\"Iterate once\"\n                icon=\"step-forward\"\n                onClick={iterateOnce}\n                disabled={isPlaying}\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        <Icon icon=\"arrow-right\" />\n                    </span>\n                }\n            />\n\n            <MenuDivider />\n            <StyledForm\n                label=\"Save board\"\n                labelFor=\"name-input\"\n                labelInfo={\n                    <>\n                        (<Icon icon=\"key-shift\" />S)\n                    </>\n                }\n            >\n                <InputGroup\n                    onChange={handleNameChange}\n                    value={name}\n                    placeholder=\"untitled_board\"\n                    id=\"name-input\"\n                    autoFocus\n                />\n                <Button\n                    className=\"save-btn\"\n                    text={\"Save\"}\n                    icon=\"floppy-disk\"\n                    onClick={saveBoard}\n                    fill\n                />\n\n            </StyledForm>\n            <MenuItem\n                text=\"Share\"\n                icon=\"share\"\n                onClick={share}\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        <Icon icon=\"key-shift\" />D\n                    </span>\n                }\n            />\n\n            <MenuDivider />\n\n            <MenuItem\n                text=\"Randomize cells\"\n                icon=\"random\"\n                onClick={randomizeBoard}\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        <Icon icon=\"key-shift\" />N\n                    </span>\n                }\n            />\n            <MenuItem\n                text=\"Clear\"\n                icon=\"eraser\"\n                onClick={clearBoard}\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        <Icon icon=\"key-shift\" />C\n                    </span>\n                }\n            />\n            <MenuItem\n                text=\"Reset\"\n                icon=\"reset\"\n                onClick={resetBoard}\n                intent=\"danger\"\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        <Icon icon=\"key-shift\" />R\n                    </span>\n                }\n            />\n            <MenuDivider />\n            <MenuItem\n                text=\"View on GitHub\"\n                icon=\"code\"\n                labelElement={<Icon icon=\"arrow-top-right\" />}\n                href=\"https://github.com/diegoasanch/Game-of-life\"\n                target=\"_blank\"\n            />\n        </Menu>\n    )\n}\n\nexport default BoardMenu\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport Sidebar from '../../components/Sidebar'\nimport CellGrid from '../../components/CellGrid'\nimport { ISavedBoard } from '../../types/cells'\nimport { GameContextProvider, ToggleCellState, useGameContext, useGameHotkeysConfig } from '../../context/game';\nimport { useInterval } from 'react-use';\nimport { IthemeProp } from '../../types/styles'\nimport { ContextMenu2 } from \"@blueprintjs/popover2\";\nimport BoardMenu from '../../components/BoardMenu'\nimport { useHotkeys } from \"@blueprintjs/core\";\n\nconst PageContainer = styled.div<IthemeProp>`\n    width: 100%;\n    height: 100%;\n    background-color: ${props => props.theme.background};\n    color: ${props => props.theme.text};\n    display: flex;\n    flex-direction: row;\n`\nconst SideContainer = styled.div`\n    width: 17em;\n    z-index: 1;\n`\nconst MainContainer = styled.div`\n    width: calc(100% - 17em);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    height: 100%;\n`\nconst ResizedContextMenu = styled(ContextMenu2)`\n    height: 100vh;\n    width: 100vw;\n`\n\ntype GameProps = {\n    loadedBoard?: ISavedBoard,\n    isLoading?: boolean,\n}\n\nconst GameWrapper = (props: GameProps) => {\n    return (\n        <GameContextProvider>\n            <Game {...props} />\n        </GameContextProvider>\n    )\n}\n\nconst Game = ({ loadedBoard, isLoading }: GameProps) => {\n    const {\n        speed,\n        isPlaying,\n        toggleState,\n        iterateOnce,\n        setLoadedBoard\n    } = useGameContext()\n\n    useEffect(() => {\n        setLoadedBoard(loadedBoard)\n    }, [loadedBoard, setLoadedBoard])\n\n    useInterval(() => {\n        iterateOnce()\n    }, isPlaying ? (1000 / speed) : null)\n\n    const hotKeysConfig = useGameHotkeysConfig()\n    const { handleKeyDown, handleKeyUp } = useHotkeys(hotKeysConfig)\n\n    return (\n        <div onKeyDown={handleKeyDown} onKeyUp={handleKeyUp}>\n            <ToggleCellState.Provider value={toggleState} >\n                <ResizedContextMenu content={\n                    <BoardMenu />\n                }>\n                    <PageContainer>\n\n                        <SideContainer>\n                            <Sidebar />\n                        </SideContainer>\n\n                        <MainContainer>\n                            <CellGrid isLoading={!!isLoading} />\n                        </MainContainer>\n\n                    </PageContainer>\n                </ResizedContextMenu>\n            </ToggleCellState.Provider>\n        </div>\n    )\n}\n\nexport default GameWrapper\n","import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { ISavedBoard } from '../../types/cells'\nimport { AppToaster } from '../../utils/toaster'\nimport Game from '../Game'\nimport { getBoard } from '../Game/gameFunctions'\n\nconst default_saved_board: ISavedBoard = {\n    name: 'undefined',\n    created: new Date(),\n    edited: new Date(),\n    board_content: [[], []],\n}\n\ntype IUrlParams = {\n    name: string,\n}\n\nfunction SavedGame() {\n\n    const { name } = useParams<IUrlParams>()\n    const [savedBoard, setSavedBoard] = useState(default_saved_board)\n    const [isLoading, setIsLoading] = useState(true)\n\n    useEffect(() => {\n        const fetchBoard = async () => {\n            try {\n                const from_localstorage = await getBoard(name)\n                if (from_localstorage) {\n                    setSavedBoard(from_localstorage)\n                    AppToaster.show({ message: `Loaded board \"${name}\"`, intent: \"primary\"})\n                }\n                else {\n                    setSavedBoard(default_saved_board)\n                    AppToaster.show({ message: `Couldn't load board \"${name}\"`, intent: \"danger\"})\n                }\n            } catch (error) {\n                AppToaster.show({ message: \"Error loading the board.\", intent: 'danger'})\n            } finally {\n                setIsLoading(false)\n            }\n        }\n\n        setIsLoading(true)\n        fetchBoard()\n\n    }, [name])\n\n    return (\n        <Game loadedBoard={savedBoard} isLoading={isLoading} />\n    )\n}\n\nexport default SavedGame\n","import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { ISavedBoard } from '../../types/cells'\nimport { showToast } from '../../utils/toaster'\nimport Game from '../Game'\nimport { base64ToBoard } from '../../utils/url'\n\nconst default_saved_board: ISavedBoard = {\n    name: 'undefined',\n    created: new Date(),\n    edited: new Date(),\n    board_content: [[], []],\n}\n\ntype IUrlParams = {\n    dimensions: string,\n    content: string,\n}\n\n\nconst notifyInvalid = () => {\n    console.error(\"Invalid board\")\n    showToast('Invalid board', 'danger')\n}\n\nfunction SharedGame() {\n\n    const { dimensions, content } = useParams<IUrlParams>()\n    const [savedBoard, setSavedBoard] = useState(default_saved_board)\n    const [isLoading, setIsLoading] = useState(true)\n\n    const createBoard = (rows: number, cols: number, content: string): Promise<void> => {\n        return new Promise((resolve, reject) => {\n            let generated_board\n\n            try {\n                if (rows && cols && content) {\n                    generated_board = base64ToBoard(rows, cols, content)\n                    showToast(`Loaded shared ${rows} x ${cols} board`, \"primary\")\n                    setSavedBoard(generated_board)\n                    return resolve()\n                }\n                throw new Error('invalid board')\n            } catch (error) {\n                return reject()\n            }\n        })\n    }\n\n    useEffect(() => {\n        let parsed_rows = 0\n        let parsed_cols = 0\n\n        if (dimensions.includes('x')) {\n            const [str_rows, str_cols] = dimensions.split('x')\n            parsed_rows = parseInt(str_rows) || 0\n            parsed_cols = parseInt(str_cols) || 0\n        }\n        else if (dimensions.length && !isNaN(parseInt(dimensions))) {\n            const side = parseInt(dimensions)\n            parsed_rows = side\n            parsed_cols = side\n        }\n        console.log({ dimensions, parsed_rows, parsed_cols, content})\n\n        const call_create = async () => {\n            setIsLoading(true)\n            try {\n                await createBoard(parsed_rows, parsed_cols, content)\n            } catch (error) {\n                setSavedBoard(default_saved_board)\n                notifyInvalid()\n            } finally {\n                setIsLoading(false)\n            }\n        }\n        call_create()\n\n    }, [dimensions, content])\n\n    return (\n        <Game loadedBoard={savedBoard} isLoading={isLoading} />\n    )\n}\n\nexport default SharedGame\n","import React from 'react';\nimport Game from './pages/Game'\nimport styled, { ThemeProvider as StyledThemeProvider } from 'styled-components'\nimport { FocusStyleManager, HotkeysProvider } from \"@blueprintjs/core\"\nimport SavedGame from './pages/SavedGame'\nimport SharedGame from './pages/SharedGame'\nimport  {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\nimport { ThemeProvider, useThemeContext } from './context/theme';\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\nconst Page = styled.div`\n  height: 100vh;\n  width: 100vw;\n`\n\nfunction App() {\n\n  return (\n    <HotkeysProvider>\n      <ThemeProvider>\n        <StyledComponentsThemeProvider>\n          <ThemedPageContainer>\n\n            <Router basename=\"/\">\n              <Switch>\n\n                <Route exact path=\"/saved/:name\">\n                  <SavedGame />\n                </Route>\n\n                <Route exact path=\"/shared/:dimensions/:content\">\n                  <SharedGame />\n                </Route>\n\n                <Route path=\"/\" exact>\n                  <Game />\n                </Route>\n\n              </Switch>\n            </Router>\n\n          </ThemedPageContainer>\n        </StyledComponentsThemeProvider>\n      </ThemeProvider>\n    </HotkeysProvider>\n  );\n}\n\nexport default App;\n\nconst StyledComponentsThemeProvider = ({ children }: any) => {\n  const { theme, isDark, toggleTheme } = useThemeContext()\n\n  return (\n    <StyledThemeProvider theme={{ ...theme, isDark, toggleTheme }}>\n      {children}\n    </StyledThemeProvider>\n  )\n}\n\nconst ThemedPageContainer = ({ children }: any) => {\n  const { isDark } = useThemeContext()\n\n  return (\n    <Page className={`.bp3-ui-text ${isDark ? 'bp3-dark' : ''}`}>\n      {children}\n    </Page>\n  )\n\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}