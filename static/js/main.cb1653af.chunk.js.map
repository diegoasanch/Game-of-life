{"version":3,"sources":["styles/colors.ts","context/theme.ts","components/SizeInput/SizeInput.tsx","components/SpeedInput/SpeedInput.tsx","components/Sidebar/Sidebar.tsx","context/game.ts","components/Cell/Cell.tsx","components/CellGrid/CellGrid.tsx","pages/Game/gameFunctions.ts","utils/url.ts","components/BoardMenu/BoardMenu.tsx","components/Models/game.ts","utils/toaster.ts","pages/Game/Game.tsx","pages/SavedGame/SavedGame.tsx","pages/SharedGame/SharedGame.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dark","background","text","sidebar","cellBorder","cellAlive","cellDead","header","scrollBarBg","scrollBarThumb","light","default_theme_context","isDark","toggleTheme","console","warn","CurrentTheme","createContext","ThemeContext","SizeInput","value","maxValue","placeholder","handleInput","allowNumericCharactersOnly","min","max","onValueChange","fill","SpeedInput","setValue","onChange","labelStepSize","Container","styled","div","props","theme","Stats","footer","Count","span","StyledHeader","H1","HeaderContainer","StyledDivider","Divider","Settings","StyledSwitch","Switch","SectionHeader","H3","InlineIcon","Icon","TooltipContent","Shoutout","H6","SizeInputRow","HeaderTooltip","className","packageJson","version","icon","Sidebar","rows","cols","setRows","setCols","iterateOnce","speed","setSpeed","isPlaying","togglePlaying","resetBoard","randomizeBoard","clearBoard","iterationCount","highlightNew","toggleHighlightNew","useContext","content","position","Position","RIGHT","intent","alignIndicator","Alignment","checked","innerLabel","innerLabelChecked","large","label","TOP","onClick","rightIcon","event","disabled","href","target","rel","ToggleCellState","col","row","log","StyledCell","alive","age","Cell","cellData","toggleCell","column","Row","CellGrid","isLoading","size","length","map","index","cell","aliveNextCycle","board","ROWS","COLS","current","UP","DOWN","LEFT","HAS_RIGHT","HAS_DOWN","HAS_UP","HAS_LEFT","alive_neighbors","Number","deep_copy","to_copy","JSON","parse","stringify","heartPattern","generateBoard","random","pattern","is_alive","generated","i","j","Math","round","parseInt","push","createBoard","heart","replaceAll","saved_label","name","getBoard","Promise","resolve","reject","window","localStorage","hasOwnProperty","board_string","getItem","parsed_board","created","Date","edited","board_content","undefined","bin_to_base64","bin","ascii","out","byte","substring","padEnd","String","fromCharCode","bin_to_ascii","btoa","getGameLink","getCols","getRows","board_to_bin","b64","location","host","pathname","new_hex","repeating","char","every","a","count","shorten_b64","base64ToBoard","b64Content","charCodeAt","toString","padStart","ascii_to_bin","atob","base64_to_bin","separator","indexOf","repetitions","repeat","unzip_b64","StyledForm","FormGroup","BoardMenu","setName","saveBoard","share","labelElement","labelFor","labelInfo","id","autoFocus","Board","loaded_board","this","AppToaster","Toaster","create","showToast","message","show","PageContainer","SideContainer","MainContainer","ResizedContextMenu","ContextMenu2","Game","fromStorage","loadedBoard","useState","colCount","setColCount","rowCount","setRowCount","setContent","resetCheckpoint","setResetCheckpoint","setIsPlaying","setIterationCount","useLocalStorage","setHighlightNew","history","useHistory","Array","isArray","new_state","current_cell","copied_data","nextCycle","prev","initializeBoard","old","handleSave","to_save","storage_key","formated_board","board_to_saved_format","serialized_board","setItem","alert","getShareableLink","link","navigator","clipboard","writeText","useEffect","checkpoint","useInterval","hotkeys","useMemo","combo","global","onKeyDown","useHotkeys","handleKeyDown","handleKeyUp","onKeyUp","Provider","copiedContent","valueAsNumber","valueAsString","innputElement","default_saved_board","SavedGame","useParams","savedBoard","setSavedBoard","setIsLoading","fetchBoard","from_localstorage","SharedGame","dimensions","generated_board","Error","error","parsed_rows","parsed_cols","includes","split","str_rows","str_cols","isNaN","side","call_create","FocusStyleManager","onlyShowFocusOnTabs","Page","App","setIsDark","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb1653af.chunk.js","sourcesContent":[" import { Itheme } from '../types/styles'\n\nexport const dark: Itheme = {\n    background: '#2F3437',\n    text: '#EBEBEB',\n    sidebar: '#151515',\n    cellBorder: '#000000',\n    cellAlive: '#0E0F1E',\n    cellDead: '#586268',\n    header: '#19A6FF',\n    scrollBarBg: '#2F3437',\n    scrollBarThumb: '#151515',\n}\nexport const light: Itheme = {\n    background: '#EBEBEB',\n    text: '#37352F',\n    sidebar: '#FFFFFF',\n    cellBorder: '#343434',\n    cellAlive: '#0E0F10',\n    cellDead: '#EEEEEE',\n    header: '#19A6FF',\n    scrollBarBg: '#EBEBEB',\n    scrollBarThumb: '#888',\n}\n","import { createContext } from 'react'\nimport { dark } from '../styles/colors'\nimport { IthemeContext } from '../types/theme'\nimport { Itheme } from '../types/styles'\n\nexport const default_theme_context = {\n    isDark: true,\n    toggleTheme: () => console.warn('No toggle theme function defined.'),\n}\n\nexport const CurrentTheme = createContext<Itheme>(dark)\n\nexport const ThemeContext = createContext<IthemeContext>(default_theme_context)\n","import React from 'react'\nimport {  NumericInput } from \"@blueprintjs/core\";\nimport { numInputCallback } from '../../types/inputs'\n\ninterface Iprops {\n    value: number,\n    maxValue: number | undefined,\n    placeholder: string,\n    handleInput: numInputCallback,\n}\n\nconst SizeInput = ({ value, maxValue, placeholder, handleInput }: Iprops) => {\n\n    return (\n        <NumericInput\n            allowNumericCharactersOnly={false}\n            min={0}\n            max={maxValue}\n            onValueChange={handleInput}\n            placeholder={placeholder}\n            value={value}\n            fill\n        />\n    )\n}\n\nexport default SizeInput\n","import React from 'react'\nimport { Slider } from \"@blueprintjs/core\";\nimport { SetNumValue } from '../../types/inputs'\n\ninterface Iprops {\n    value: number,\n    setValue: SetNumValue,\n}\n\n\nconst SpeedInput = ({ value, setValue }: Iprops) => {\n    return (\n        <Slider\n            value={value}\n            onChange={setValue}\n            max={30}\n            labelStepSize={4}\n            min={1}\n        />\n    )\n}\n\nexport default SpeedInput\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { dark } from '../../styles/colors'\nimport SizeInput from '../SizeInput'\nimport { Label, Button, ButtonGroup, Position, H1, H3, H4, Divider, Switch, Alignment, Icon, H6 } from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport { numInputCallback, SetNumValue } from '../../types/inputs'\nimport SpeedInput from '../SpeedInput'\nimport { CurrentTheme } from '../../context/theme'\nimport { IthemeProp } from '../../types/styles'\nimport packageJson from '../../../package.json';\n\nconst Container = styled.div<IthemeProp>`\n    position: relative;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    background-color: ${props => props.theme.sidebar};\n    padding: 8px;\n    align-items: center;\n    justify-content: stretch;\n`\nconst Stats = styled.footer<IthemeProp>`\n    position: absolute;\n    bottom: 5px;\n    left: 10px;\n\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-self: end;\n    margin-top: 10px;\n    width: 90%;\n    height: 5em;\n\n    background-color: ${props => props.theme.sidebar};\n    z-index: 34;\n\n    .divider {\n        margin-bottom: 10px;\n    }\n`\n\nconst Count = styled.span`\n    color: ${dark.header};\n`\nconst StyledHeader = styled(H1)`\n    font-size: 4em !important;\n    line-height: .9em !important;\n    font-weight: bold;\n    align-self: flex-start;\n`\nconst HeaderContainer = styled.header`\n    position: relative;\n    width: 100%;\n`\nconst StyledDivider = styled(Divider)`\n    width: 100%;\n`\nconst Settings = styled.div<IthemeProp>`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    overflow-y: auto;\n    width: 100%;\n    margin-bottom: 4.5em;\n    /* margin-right: 5px; */\n\n    > * {\n        margin: .5em 0;\n    }\n    &::-webkit-scrollbar {\n        /* display: none; */\n        background-color: ${props => props.theme.scrollBarBg};\n        width: 5px;\n        height: 5px;\n    }\n    &::-webkit-scrollbar-thumb {\n        background-color: ${props => props.theme.scrollBarThumb};\n    }\n    /* &:hover {\n        margin-right: 0;\n        &::-webkit-scrollbar {\n            display: contents;\n        }\n    } */\n`\nconst StyledSwitch = styled(Switch)`\n    position: absolute;\n    bottom: 0;\n    right: 0;\n`\nconst SectionHeader = styled(H3)`\n    align-self: flex-flex-start;\n`\nconst InlineIcon = styled(Icon)`\n    display: inline-block;\n    vertical-align: super;\n    margin-left: .2em;\n`\nconst TooltipContent = styled.div`\n    width: 40vw;\n    max-width: 1000px;\n    min-width: 500px;\n    padding: 1em;\n`\nconst Shoutout = styled(H6)`\n    font-size: .9em !important;\n\n    a &:not(:hover) {\n        color: inherit;\n    }\n`\nconst SizeInputRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    justify-items: center;\n    align-items: center;\n\n    > * {\n        padding: 0 5%;\n    }\n`\n\ninterface Iprops {\n    rows: number,\n    cols: number,\n    setRows: numInputCallback,\n    setCols: numInputCallback,\n    speed: number,\n    setSpeed: SetNumValue,\n    isPlaying: boolean,\n    iterationCount: number,\n    iterateOnce: () => void,\n    resetBoard: () => void,\n    randomizeBoard: () => void,\n    clearBoard: () => void,\n    togglePlaying: () => void,\n    readonly isDark: boolean,\n    toggleTheme: () => void,\n    readonly highlightNew: boolean,\n    toggleHighlightNew: () => void,\n}\n\nconst HeaderTooltip = (\n    <TooltipContent>\n        <h1>Conway's Game of Life <span className=\"bp3-text-muted\"> - v{packageJson.version}</span></h1>\n        <p>\n            &emsp; Is a <strong>cellular automaton</strong> devised by the\n            British mathematician John\n            Horton Conway in 1970. It is a zero-player game, meaning that its\n            evolution is determined by its initial state, requiring no further\n            input.<br/>\n            &emsp; One interacts with the Game of Life by creating an initial\n            configuration and observing how it evolves.\n\n        </p>\n        <h2>How to play?</h2>\n        <p>\n            &emsp; Click on a cell to change its state. Change as many cells as you want and\n            press <strong><Icon icon=\"play\"/> Play</strong>!\n            <br/>\n            &emsp; Alternatively, click the <strong><Icon icon=\"step-forward\"/> Step by step </strong>\n            button to evolve the board one cycle at a time.\n        </p>\n        <h2>Rules</h2>\n        <ul>\n            <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation.</li>\n            <li>Any live cell with two or three live neighbours lives on to the next generation.</li>\n            <li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li>\n            <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\n        </ul>\n    </TooltipContent>\n)\n\nconst Sidebar = ({\n    rows,\n    cols,\n    setRows,\n    setCols,\n    iterateOnce,\n    speed,\n    setSpeed,\n    isPlaying,\n    togglePlaying,\n    resetBoard,\n    randomizeBoard,\n    clearBoard,\n    iterationCount,\n    isDark,\n    toggleTheme,\n    highlightNew,\n    toggleHighlightNew,\n}: Iprops) => {\n\n    const theme = useContext(CurrentTheme)\n\n    const handleClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n        iterateOnce()\n    }\n\n\n    return (\n        <Container theme={theme}>\n\n            <HeaderContainer>\n                <Tooltip2 content={HeaderTooltip} position={Position.RIGHT}>\n                    <StyledHeader>\n                        Game <br/>\n                        of <br/>\n                        Life\n                        <InlineIcon icon=\"info-sign\" intent=\"primary\"/>\n                    </StyledHeader>\n                </Tooltip2>\n                <StyledSwitch\n                    alignIndicator={Alignment.RIGHT}\n                    checked={isDark}\n                    onChange={toggleTheme}\n                    innerLabel=\"🌞\"\n                    innerLabelChecked=\"🌚\"\n                    large\n                />\n            </HeaderContainer>\n\n            <StyledDivider />\n\n            <Settings theme={theme}>\n\n                <SectionHeader>Settings</SectionHeader>\n\n                <Switch\n                    alignIndicator={Alignment.RIGHT}\n                    checked={highlightNew}\n                    onChange={toggleHighlightNew}\n                    label=\"Highlight new cells\"\n                    // large\n                />\n                <SizeInputRow>\n                    <Label>\n                        Rows\n                        <SizeInput\n                            value={rows}\n                            maxValue={250}\n                            placeholder=\"Row count\"\n                            handleInput={setRows}\n                        />\n                    </Label>\n                    <Label>\n                        Columns\n                        <SizeInput\n                            value={cols}\n                            maxValue={250}\n                            placeholder=\"Column count\"\n                            handleInput={setCols}\n                        />\n                    </Label>\n                </SizeInputRow>\n                <Label>\n                    Iteration Speed\n                    <span className=\"bp3-text-muted\"> (Hz)</span>\n                    <SpeedInput\n                        value={speed}\n                        setValue={setSpeed}\n                    />\n                </Label>\n\n                <ButtonGroup large>\n                    <Tooltip2 content={`${isPlaying ? 'Stop': 'Start'} iterating`} position={Position.TOP}>\n                        <Button\n                            text={isPlaying ? \"Pause\" : \"Play\"}\n                            icon={isPlaying ? \"pause\" : \"play\"}\n                            intent=\"primary\"\n                            onClick={togglePlaying}\n                        />\n                    </Tooltip2>\n                    <Tooltip2 content=\"Step-by-step\" position={Position.TOP}>\n                        <Button\n                            rightIcon=\"step-forward\"\n                            onClick={handleClick}\n                            disabled={isPlaying}\n                        />\n                    </Tooltip2>\n\n                </ButtonGroup>\n                <ButtonGroup>\n                    <Tooltip2 content=\"Reset board\" position={Position.TOP}>\n                        <Button\n                            onClick={resetBoard}\n                            icon=\"reset\"\n                            intent=\"danger\"\n                        />\n                    </Tooltip2>\n                    <Tooltip2 content=\"Clear board\" position={Position.TOP}>\n                        <Button\n                            onClick={clearBoard}\n                            icon=\"eraser\"\n                        />\n                    </Tooltip2>\n                    <Tooltip2 content=\"Randomize cells\" position={Position.TOP}>\n                        <Button\n                            text=\"Random\"\n                            onClick={randomizeBoard}\n                            icon=\"random\"\n                        />\n                    </Tooltip2>\n                </ButtonGroup>\n            </Settings>\n\n\n            <Stats theme={theme}>\n                <StyledDivider className=\"divider\" />\n\n                <H4>Iteration count: <Count>{iterationCount}</Count></H4>\n                <Shoutout className=\"bp3-text-muted\">\n                    Made with 💖 by&nbsp;\n                    <a href=\"https://github.com/diegoasanch\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        Diego.\n                    </a>\n                </Shoutout>\n\n            </Stats>\n        </Container>\n    )\n}\n\nexport default Sidebar\n","import { createContext } from 'react'\n\nexport const ToggleCellState = createContext((col: number, row: number) => {console.log('Not yet configured')})\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { cellContent } from '../../types/cells'\nimport { ToggleCellState } from '../../context/game'\nimport { CurrentTheme } from '../../context/theme'\nimport { IthemeProp, ICellType } from '../../types/styles'\n\nconst StyledCell = styled.div<cellContent & IthemeProp & ICellType>`\n    height: 20px;\n    width: 20px;\n    background-color: ${props => (\n        props.alive ? ((props.age !== 1 || !props.highlightNew) ? props.theme.cellAlive : props.theme.header) : props.theme.cellDead\n    )};\n    border: solid 1px ${props => props.theme.cellBorder};\n`\n\ntype Iprops = {\n    cellData: cellContent,\n    highlightNew: boolean,\n}\n\nconst Cell = ({ cellData, highlightNew }: Iprops ) => {\n    const toggleCell = useContext(ToggleCellState)\n    const theme = useContext(CurrentTheme)\n\n    const handleClick = () => {\n        toggleCell(cellData.column, cellData.row)\n    }\n\n    return (\n        <StyledCell\n            {...cellData}\n            onClick={handleClick}\n            theme={theme}\n            highlightNew={highlightNew}\n        />\n    )\n}\n\nexport default Cell\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { CurrentTheme } from '../../context/theme'\nimport { cellContent } from '../../types/cells'\nimport { IthemeProp } from '../../types/styles'\nimport { H1, Spinner } from '@blueprintjs/core'\nimport Cell from '../Cell'\n\nconst Container = styled.div<IthemeProp>`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    overflow: scroll;\n    height: 100%;\n    width: 100%;\n    justify-content: center;\n\n    &::-webkit-scrollbar {\n        background-color: ${props => props.theme.scrollBarBg};\n        width: 10px;\n        height: 10px;\n    }\n    &::-webkit-scrollbar-thumb {\n        background-color: ${props => props.theme.scrollBarThumb};\n    }\n`\nconst Row = styled.div`\n    display: flex;\n    flex-direction: row;\n    margin: 0;\n`\n\ninterface Iprops {\n    rows: cellContent[][] | undefined,\n    highlightNew: boolean,\n    isLoading: boolean\n}\n\nconst CellGrid = ({ rows, highlightNew, isLoading }: Iprops) => {\n    const theme = useContext(CurrentTheme)\n\n    return (\n        <Container theme={theme}>\n            { isLoading ?\n                <>\n                    <H1>Loading...</H1>\n                    <br />\n                    <Spinner size={80} intent=\"primary\"/>\n                </>\n            :\n                (\n                (rows?.length && rows[0].length) ?\n                    ( rows.map((row, index) => (\n                        <Row key={`row_${index}`}>\n                            { row.map( cell => (\n                                <Cell\n                                    key={`cell_${cell.row}_${cell.column}`}\n                                    cellData={cell}\n                                    highlightNew={highlightNew}\n                                />\n                            ))}\n                        </Row>\n                    )\n                ))\n                :\n                <H1>Not enough cells to display 😢</H1>\n            )\n            }\n        </Container>\n    )\n}\n\nexport default CellGrid\n","import { boardData, IBoard, ISavedBoard } from '../../types/cells'\n\nexport const aliveNextCycle = (board: boardData, row: number, col: number): boolean => {\n    const ROWS = board.length;\n    const COLS = board[0].length;\n    const current = board[row][col]\n\n    const UP = row - 1\n    const DOWN = row + 1\n    const LEFT = col - 1\n    const RIGHT = col + 1\n\n    const HAS_RIGHT = RIGHT < COLS\n    const HAS_DOWN = DOWN < ROWS\n    const HAS_UP = UP >= 0\n    const HAS_LEFT = LEFT >= 0\n\n    const top_left = (HAS_LEFT && HAS_UP) ? Number(board[UP][LEFT].alive) : 0;\n    const top_center = HAS_UP ? Number(board[UP][col].alive) : 0;\n    const top_right = (HAS_RIGHT && HAS_UP) ? Number(board[UP][RIGHT].alive) : 0;\n    const center_left = HAS_LEFT ? Number(board[row][LEFT].alive) : 0;\n    const center_right = HAS_RIGHT ? Number(board[row][RIGHT].alive) : 0;\n    const bottom_left = (HAS_LEFT && HAS_DOWN) ? Number(board[DOWN][LEFT].alive) : 0;\n    const bottom_center = HAS_DOWN ? Number(board[DOWN][col].alive) : 0;\n    const bottom_right = (HAS_DOWN && HAS_RIGHT) ? Number(board[DOWN][RIGHT].alive) : 0;\n\n    const alive_neighbors = (top_left + top_center + top_right + center_left + center_right + bottom_left + bottom_center + bottom_right)\n    return (alive_neighbors === 3) || (current.alive && alive_neighbors === 2)\n}\n\nexport const nextCycle = (board: boardData) : boardData => {\n    const copied_data = deep_copy(board) // copy the board\n    let i\n    let j\n\n    const rows = board.length;\n    const cols = board[0].length;\n    let new_state\n    let current_cell\n\n    for (i = 0; i < rows; i++) {\n        for (j = 0; j < cols; j++) {\n            new_state = aliveNextCycle(board, i, j)\n            current_cell = copied_data[i][j]\n            current_cell.alive = new_state\n\n            if (new_state) {\n                current_cell.age += 1\n            }\n            else {\n                current_cell.age = 0\n            }\n        }\n    }\n    return copied_data\n}\n\nexport const deep_copy = (to_copy: any): any => {\n    return JSON.parse(JSON.stringify(to_copy))\n}\n\n\nconst heartPattern: string = `\n0000000000000000000000000100000000000000\n0000000000000000000000000000000100000000\n0000000000100000000000010000000100000000\n0001100011000000100000000000000100000110\n0000100001000000010000000000000000000010\n0000000000000000001000000000000000000000\n0000000000000000000000000000000000000000\n0000000000000000000000000000000001000000\n0000000000000000000000000010000000000000\n0000000000000000000000000000000000000000\n0000000000000000011000110000000000000000\n0000000000000000111101111000000000000000\n0001100000000001111111111100000000000000\n0011000000000001111111111100000000000000\n0010000000000000111111111000000011000001\n0000000000000000011111110000000000000000\n0000100001000000001111100000000000000010\n0000100001001000000111000000000000000010\n0000100001011100000010000000000000000010\n0000000000110000000000000000000000000000\n0000000000000000000000000000000000000000\n0000000000000000000000000000000000000000\n0000000000000000000000000010000000000000\n0000000000000000000000000111000000000000\n0000000000000000000000000010000100000000\n0000011100001110000000000000000010000000\n0000000000000010000000000000000001000000\n0000000000000000000000000000000000000000\n0000000000000000000000110000000011000000\n1000010000000000000000100000000001100000\n`\n\nexport const generateBoard = (rows: number, cols: number, random?: boolean, pattern?: string): boardData => {\n    const generated = []\n    let row;\n    let is_alive\n\n    for (let i = 0; i < rows; i++) {\n        row = []\n        for (let j = 0; j < cols; j++) {\n            if (random)\n                is_alive = !!(Math.round(Math.random()))\n            else if (pattern?.length)\n                is_alive = !!parseInt(pattern[(i * cols) + j])\n            else\n                is_alive = false;\n\n            row.push({\n                alive: is_alive,\n                age: 0,\n                row: i,\n                column: j\n            })\n        }\n        generated.push(row)\n    }\n    return generated\n}\n\nexport const createBoard = (rows: number, cols: number, random: boolean, heart=false): boardData  => {\n    const pattern = heartPattern.replaceAll('\\n', '')\n    if (heart)\n        return generateBoard(rows, cols, random, pattern)\n    return generateBoard(rows, cols, random)\n}\n\nexport const saved_label = (name: string): string => `saved/${name.replaceAll(' ', '_')}`\n\n\nexport const board_to_saved_format = (to_save: IBoard): ISavedBoard => (\n    {\n        name: to_save.name,\n        created: to_save.created,\n        edited: to_save.edited,\n        board_content: to_save.board_content,\n    }\n)\n\nexport const saveBoard = (to_save: IBoard): void => {\n    const storage_key = saved_label(to_save.name)\n\n    if (window.localStorage.hasOwnProperty(storage_key)) {\n        to_save.edited = new Date();\n    }\n    const formated_board = board_to_saved_format(to_save)\n    const serialized_board = JSON.stringify(formated_board)\n\n    window.localStorage.setItem(storage_key, serialized_board)\n}\n\nexport const getBoard = (name: string): Promise<ISavedBoard | undefined> => {\n\n    return new Promise((resolve, reject) => {\n        if (window.localStorage.hasOwnProperty(saved_label(name))) { // saved entry\n            const board_string = window.localStorage.getItem(saved_label(name)) ?? '{}'\n            const parsed_board = JSON.parse(board_string)\n            const default_content: boardData = [[]]\n\n            const loaded_board: ISavedBoard = {\n                name: parsed_board.name ?? 'undefined',\n                created: parsed_board.created ?? new Date(),\n                edited: parsed_board.edited ?? new Date(),\n                board_content: parsed_board.board_content ?? default_content,\n            }\n            return resolve(loaded_board)\n        }\n        return resolve(undefined)\n    })\n\n}\n","import { boardData, IBoard, ISavedBoard } from \"../types/cells\"\nimport { generateBoard } from '../pages/Game/gameFunctions'\n\nconst board_to_bin = (content: boardData): string => {\n    let bin = ''\n\n    for (let row of content) {\n        for (let col of row) {\n            bin += col.alive ? '1' : '0'\n        }\n    }\n    return bin\n}\n\nconst bin_to_ascii = (bin: string): string => {\n    let out = ''\n    let byte = ''\n\n    for (let i = 0; i < bin.length; i += 8) {\n        byte = bin.substring(i, i + 8).padEnd(8, '0')\n        out += String.fromCharCode(parseInt(byte, 2))\n    }\n    return out\n}\n\nconst bin_to_base64 = (bin: string): string => {\n    const ascii = bin_to_ascii(bin)\n    const b64 = btoa(ascii).replaceAll('/', '_')\n    return b64\n}\n\nconst shorten_b64 = (b64: string): string => {\n    let new_hex = ''\n    let current = ''\n    let next = ''\n    let repeating = false\n\n    for (let char = 0; char < b64.length; char++) {\n        current = b64[char]\n        next = (char < b64.length - 1) ? b64[char + 1] : ''\n\n        if ([current, next].every(a => a === 'A')) {\n            let count = 0\n            repeating = true\n\n            while (repeating && char < b64.length) {\n                count++\n                repeating = b64[++char] === current\n            }\n            new_hex += `&${count};`\n            char--\n        }\n        else {\n            new_hex += current\n        }\n    }\n    return new_hex\n}\n\nconst unzip_b64 = (b64: string): string => {\n    let out = ''\n    for (let i = 0; i < b64.length; i++) {\n        if (b64[i] !== '&')\n            out += b64[i]\n        else {\n            const separator = b64.indexOf(';', i);\n            const repetitions = parseInt(b64.substring(i+1, separator))\n            i = separator\n            out += 'A'.repeat(repetitions)\n        }\n    }\n    return out\n}\nconst ascii_to_bin = (ascii: string): string => {\n    let out = ''\n    let char = ''\n\n    for (let i = 0; i < ascii.length; i++) {\n        char = (ascii[i].charCodeAt(0)).toString(2).padStart(8, '0')\n        out += char\n    }\n    return out\n}\n\nconst base64_to_bin = (b64: string): string => {\n    const ascii = atob(b64.replaceAll('_', '/'))\n    const bin = ascii_to_bin(ascii)\n    return bin\n}\n\nexport const getGameLink = (board: IBoard): string => {\n    const cols = board.getCols()\n    const rows = board.getRows()\n\n    const bin = board_to_bin(board.board_content)\n    const b64 = bin_to_base64(bin)\n\n    const { host, pathname } = window.location\n    return host + pathname + `#/shared/${rows}x${cols}/${shorten_b64(b64)}`\n}\n\nexport const base64ToBoard = (rows: number, cols: number, b64Content: string): ISavedBoard => {\n    const b64 = unzip_b64(b64Content)\n    const bin = base64_to_bin(b64)\n\n    // console.log(`Zipped: ${b64Content} \\n\\n\\n Hex: ${b64}\\n\\n\\nBinary: ${bin}`)\n\n    const content = generateBoard(rows, cols, false, bin)\n    const board: ISavedBoard = {\n        name: 'Shared board',\n        created: new Date(),\n        edited: new Date(),\n        board_content: content,\n    }\n\n    return board\n}\n","import React from 'react'\nimport { Menu, MenuItem, MenuDivider, Icon, InputGroup, FormGroup, Button } from \"@blueprintjs/core\";\nimport styled from 'styled-components';\n\nconst StyledForm = styled(FormGroup)`\n    padding: 0 0 5px 5px;\n    width: calc(100% - 10px);\n    margin: 0;\n\n    .save-btn {\n        margin-top: 5px;\n    }\n`\n\ninterface Iprops {\n    iterateOnce: () => void,\n    isPlaying: boolean,\n    togglePlaying: () => void,\n    resetBoard: () => void,\n    randomizeBoard: () => void,\n    clearBoard: () => void,\n    name: string,\n    setName: (name: string) => void,\n    saveBoard: () => void,\n    share: () => void,\n}\n\nconst BoardMenu = ({\n    iterateOnce,\n    isPlaying,\n    togglePlaying,\n    resetBoard,\n    randomizeBoard,\n    clearBoard,\n    name,\n    setName,\n    saveBoard,\n    share,\n}: Iprops) => {\n\n    const handleNameChange = (event: React.FormEvent<HTMLElement>) => {\n        // console.log({changed_name})\n        setName((event.target as HTMLInputElement).value)\n    }\n\n    return (\n        <Menu>\n            <MenuItem\n                text={isPlaying ? \"Pause\" : \"Play\"}\n                icon={isPlaying ? \"pause\" : \"play\"}\n                onClick={togglePlaying}\n                intent=\"primary\"\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        P\n                    </span>\n                }\n            />\n            <MenuItem\n                text=\"Iterate once\"\n                icon=\"step-forward\"\n                onClick={iterateOnce}\n                disabled={isPlaying}\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        <Icon icon=\"arrow-right\" />\n                    </span>\n                }\n            />\n\n            <MenuDivider />\n            <StyledForm\n                label=\"Save board\"\n                labelFor=\"name-input\"\n                labelInfo={\n                    <>\n                        (<Icon icon=\"key-shift\" />S)\n                    </>\n                }\n            >\n                <InputGroup\n                    onChange={handleNameChange}\n                    value={name}\n                    placeholder=\"untitled_board\"\n                    id=\"name-input\"\n                    autoFocus\n                />\n                <Button\n                    className=\"save-btn\"\n                    text={\"Save\"}\n                    icon=\"floppy-disk\"\n                    onClick={saveBoard}\n                    fill\n                />\n\n            </StyledForm>\n            <MenuItem\n                text=\"Share\"\n                icon=\"share\"\n                onClick={share}\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        <Icon icon=\"key-shift\" />D\n                    </span>\n                }\n            />\n\n            <MenuDivider />\n\n            <MenuItem\n                text=\"Randomize cells\"\n                icon=\"random\"\n                onClick={randomizeBoard}\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        <Icon icon=\"key-shift\" />N\n                    </span>\n                }\n            />\n            <MenuItem\n                text=\"Clear\"\n                icon=\"eraser\"\n                onClick={clearBoard}\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        <Icon icon=\"key-shift\" />C\n                    </span>\n                }\n            />\n            <MenuItem\n                text=\"Reset\"\n                icon=\"reset\"\n                onClick={resetBoard}\n                intent=\"danger\"\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        <Icon icon=\"key-shift\" />R\n                    </span>\n                }\n            />\n            <MenuDivider />\n            <MenuItem\n                text=\"View on GitHub\"\n                icon=\"code\"\n                labelElement={<Icon icon=\"arrow-top-right\" />}\n                href=\"https://github.com/diegoasanch/Game-of-life\"\n                target=\"_blank\"\n            />\n        </Menu>\n    )\n}\n\nexport default BoardMenu\n","import { boardData, IBoard, ISavedBoard } from \"../../types/cells\";\n\nexport class Board implements IBoard {\n    public name = ''\n    public created = new Date()\n    public edited =  new Date()\n    public board_content: boardData = [[]]\n\n    constructor(loaded_board: ISavedBoard | null, board_content?: boardData, name?: string) {\n\n        if (loaded_board) {\n            console.log(`Creating board from: ${loaded_board}`)\n\n            this.name = loaded_board.name ?? 'undefined'\n            this.created = loaded_board.created ?? new Date()\n            this.edited =  loaded_board.edited ?? new Date()\n            this.board_content = loaded_board.board_content\n        }\n        else if (board_content) {\n            this.name = name ?? 'untitled_board'\n            this.created = new Date()\n            this.edited = new Date()\n            this.board_content = board_content\n        }\n    }\n\n    getRows() {\n        return this.board_content.length\n    }\n\n    getCols() {\n        return this.board_content[0].length\n    }\n}\n\n// export class Board {\n//     constructor() {\n//         console.log(\"Dummy board\")\n//     }\n// }\n","import { Position, Toaster, Intent } from '@blueprintjs/core'\n\nexport const AppToaster = Toaster.create({\n    className: \"recipe-toaster\",\n    position: Position.TOP\n})\n\nexport const showToast = (message: string, intent?: Intent) => {\n    AppToaster.show({ message, intent })\n}\n","import React, { useContext, useEffect, useState, useMemo } from 'react'\nimport styled from 'styled-components'\nimport Sidebar from '../../components/Sidebar'\nimport CellGrid from '../../components/CellGrid'\nimport { numInputCallback, SetNumValue } from '../../types/inputs'\nimport { boardData, ISavedBoard } from '../../types/cells'\nimport { ToggleCellState } from '../../context/game'\nimport { useInterval, useLocalStorage } from 'react-use';\nimport { CurrentTheme, ThemeContext } from '../../context/theme'\nimport { IthemeProp } from '../../types/styles'\nimport { nextCycle, deep_copy, createBoard, saveBoard, saved_label } from './gameFunctions'\n// import { getGameLink } from './gameFunctions'\nimport { getGameLink } from '../../utils/url'\nimport { ContextMenu2 } from \"@blueprintjs/popover2\";\nimport BoardMenu from '../../components/BoardMenu'\nimport { useHotkeys } from \"@blueprintjs/core\";\nimport { Board } from '../../components/Models/game'\nimport { useHistory } from 'react-router-dom'\nimport { showToast } from '../../utils/toaster'\n\nconst PageContainer = styled.div<IthemeProp>`\n    width: 100%;\n    height: 100%;\n    background-color: ${props => props.theme.background};\n    color: ${props => props.theme.text};\n    display: flex;\n    flex-direction: row;\n`\nconst SideContainer = styled.div`\n    width: 270px;\n    z-index: 1;\n`\nconst MainContainer = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    height: 100%;\n`\nconst ResizedContextMenu = styled(ContextMenu2)`\n    height: 100vh;\n    width: 100vw;\n`\n\n\ntype IProps = {\n    fromStorage: boolean,\n    loadedBoard?: ISavedBoard,\n    isLoading?: boolean,\n}\n\n\nconst Game = ({ fromStorage, loadedBoard, isLoading }: IProps) => {\n\n    const theme = useContext(CurrentTheme)\n    const { isDark, toggleTheme } = useContext(ThemeContext)\n\n    const [colCount, setColCount] = useState(40)\n    const [rowCount, setRowCount] = useState(30)\n    const [content, setContent] = useState<boardData>()\n    const [resetCheckpoint, setResetCheckpoint] = useState<boardData>()\n\n    const [speed, setSpeed] = useState(10)\n    const [isPlaying, setIsPlaying] = useState(false)\n    const [iterationCount, setIterationCount] = useState(0)\n    const [highlightNew, setHighlightNew] = useLocalStorage('highlightNew', false)\n    const history = useHistory()\n    const [name, setName] = useState('')\n\n    const handleColInput: numInputCallback = (valueAsNumber, valueAsString, innputElement) => {\n        setColCount(valueAsNumber)\n    }\n    const handleRowInput: numInputCallback = (valueAsNumber, valueAsString, innputElement) => {\n        setRowCount(valueAsNumber)\n    }\n    const handleSpeed: SetNumValue = (value) => {\n        setSpeed(value)\n    }\n\n    const toggleState = (col: number, row: number) : void => {\n        if (Array.isArray(content)) {\n            console.log(`Toggling cell: [${row}][${col}]`)\n            const copiedContent = deep_copy(content)\n\n            copiedContent[row][col].alive = !copiedContent[row][col].alive\n            setContent(copiedContent)\n        }\n    }\n\n    const iterateOnce = () => {\n        if (Array.isArray(content)) {\n            setContent(nextCycle(content))\n            setIterationCount(prev => prev + 1)\n        }\n    }\n\n    const initializeBoard = (rows: number, cols: number, random=false, heart=false) => {\n        setContent(createBoard(rows, cols, random, heart))\n        setIterationCount(0)\n    }\n\n    const resetBoard = () => {\n        setContent(resetCheckpoint)\n        setIterationCount(0)\n        showToast('Reset board', 'primary')\n    }\n    const randomizeBoard = () => {\n        initializeBoard(rowCount, colCount, true, false)\n        showToast('Randomized cells', 'primary')\n    }\n    const clearBoard = () => {\n        initializeBoard(rowCount, colCount, false, false)\n        showToast('Cleared board', 'primary')\n    }\n\n    const togglePlaying = () => {\n        setIsPlaying(old => !old)\n    }\n    const toggleHighlightNew = () => {\n        setHighlightNew(!highlightNew)\n    }\n\n    const handleSave = () => {\n        if (name.length) {\n            console.log(`Saving... ${name}`)\n            saveBoard(new Board(null, content, name))\n            history.push(\"/\" + saved_label(name))\n            showToast(`Saved board: ${name}`, 'success')\n        }\n        else {\n            alert(\"Invalid name\")\n        }\n    }\n\n    const getShareableLink = () => {\n        const link = getGameLink(new Board(null, content, name))\n        navigator.clipboard.writeText(link)\n        showToast('Link copied to clipboard.', 'primary')\n    }\n\n    useEffect(() => {\n        initializeBoard(rowCount, colCount)\n    }, [rowCount, colCount])\n\n    useEffect(() => {\n        let checkpoint: boardData | undefined;\n\n        if (fromStorage) {\n            setContent(loadedBoard?.board_content)\n            setName(loadedBoard?.name ?? 'untitled_board')\n            checkpoint = loadedBoard?.board_content\n        }\n        else {\n            initializeBoard(rowCount, colCount, false, true)\n            checkpoint = createBoard(rowCount, colCount, false, true)\n        }\n        setResetCheckpoint(checkpoint)\n\n    // eslint-disable-next-line\n    }, [fromStorage, loadedBoard?.board_content])\n\n    useInterval(() => {\n        iterateOnce()\n    }, isPlaying ? (1000 / speed) : null)\n\n    const hotkeys = useMemo(() => [\n        {\n            combo: 'p',\n            global: true,\n            label: \"Play\",\n            onKeyDown: togglePlaying\n        },\n        {\n            combo: 'right',\n            global: true,\n            label: \"Iterate once\",\n            onKeyDown: iterateOnce\n        },\n        {\n            combo: 'shift + n',\n            global: true,\n            label: \"Randomize cells\",\n            onKeyDown: randomizeBoard\n        },\n        {\n            combo: 'shift + c',\n            global: true,\n            label: \"Clear board\",\n            onKeyDown: clearBoard\n        },\n        {\n            combo: 'shift + r',\n            global: true,\n            label: \"Reset Board\",\n            onKeyDown: resetBoard\n        },\n        {\n            combo: 'shift + l',\n            global: true,\n            label: \"Toggle theme\",\n            onKeyDown: toggleTheme\n        },\n        {\n            combo: 'shift + h',\n            global: true,\n            label: \"Toggle theme\",\n            onKeyDown: toggleHighlightNew\n        },\n        {\n            combo: 'shift + s',\n            global: true,\n            label: \"Save board\",\n            onKeyDown: handleSave\n        },\n        {\n            combo: 'shift + d',\n            global: true,\n            label: \"Share board\",\n            onKeyDown: getShareableLink\n        },\n    // eslint-disable-next-line\n    ], [content, isDark, highlightNew])\n\n    const { handleKeyDown, handleKeyUp } = useHotkeys(hotkeys)\n\n    return (\n        <div onKeyDown={handleKeyDown} onKeyUp={handleKeyUp}>\n            <ToggleCellState.Provider value={toggleState} >\n                <ResizedContextMenu content={\n                    <BoardMenu\n                        iterateOnce={iterateOnce}\n                        isPlaying={isPlaying}\n                        togglePlaying={togglePlaying}\n                        resetBoard={resetBoard}\n                        randomizeBoard={randomizeBoard}\n                        clearBoard={clearBoard}\n                        name={name}\n                        setName={setName}\n                        saveBoard={handleSave}\n                        share={getShareableLink}\n\n                    />\n                }>\n                    <PageContainer theme={theme}>\n                        <SideContainer>\n                            <Sidebar\n                                rows={rowCount}\n                                cols={colCount}\n                                setRows={handleRowInput}\n                                setCols={handleColInput}\n                                iterateOnce={iterateOnce}\n                                speed={speed}\n                                setSpeed={handleSpeed}\n                                isPlaying={isPlaying}\n                                togglePlaying={togglePlaying}\n                                resetBoard={resetBoard}\n                                randomizeBoard={randomizeBoard}\n                                clearBoard={clearBoard}\n                                iterationCount={iterationCount}\n                                isDark={isDark}\n                                toggleTheme={toggleTheme}\n                                highlightNew={!!highlightNew}\n                                toggleHighlightNew={toggleHighlightNew}\n                            />\n                        </SideContainer>\n\n                            <MainContainer>\n                                <CellGrid\n                                    rows={content}\n                                    highlightNew={!!highlightNew}\n                                    isLoading={!!isLoading}\n                                />\n                        </MainContainer>\n                    </PageContainer>\n                </ResizedContextMenu>\n            </ToggleCellState.Provider>\n        </div>\n    )\n}\n\nexport default Game\n","import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { ISavedBoard } from '../../types/cells'\nimport { AppToaster } from '../../utils/toaster'\nimport Game from '../Game'\nimport { getBoard } from '../Game/gameFunctions'\n\nconst default_saved_board: ISavedBoard = {\n    name: 'undefined',\n    created: new Date(),\n    edited: new Date(),\n    board_content: [[], []],\n}\n\ntype IUrlParams = {\n    name: string,\n}\n\nfunction SavedGame() {\n\n    const { name } = useParams<IUrlParams>()\n    const [savedBoard, setSavedBoard] = useState(default_saved_board)\n    const [isLoading, setIsLoading] = useState(true)\n\n    useEffect(() => {\n        const fetchBoard = async () => {\n            try {\n                const from_localstorage = await getBoard(name)\n                if (from_localstorage) {\n                    setSavedBoard(from_localstorage)\n                    AppToaster.show({ message: `Loaded board \"${name}\"`, intent: \"primary\"})\n                }\n                else {\n                    setSavedBoard(default_saved_board)\n                    AppToaster.show({ message: `Couldn't load board \"${name}\"`, intent: \"danger\"})\n                }\n            } catch (error) {\n                AppToaster.show({ message: \"Error loading the board.\", intent: 'danger'})\n            } finally {\n                setIsLoading(false)\n            }\n        }\n\n        setIsLoading(true)\n        fetchBoard()\n\n    }, [name])\n\n    return (\n        <Game fromStorage={true} loadedBoard={savedBoard} isLoading={isLoading} />\n    )\n}\n\nexport default SavedGame\n","import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { ISavedBoard } from '../../types/cells'\nimport { showToast } from '../../utils/toaster'\nimport Game from '../Game'\nimport { base64ToBoard } from '../../utils/url'\n\nconst default_saved_board: ISavedBoard = {\n    name: 'undefined',\n    created: new Date(),\n    edited: new Date(),\n    board_content: [[], []],\n}\n\ntype IUrlParams = {\n    dimensions: string,\n    content: string,\n}\n\n\nconst notifyInvalid = () => {\n    console.error(\"Invalid board\")\n    showToast('Invalid board', 'danger')\n}\n\nfunction SharedGame() {\n\n    const { dimensions, content } = useParams<IUrlParams>()\n    const [savedBoard, setSavedBoard] = useState(default_saved_board)\n    const [isLoading, setIsLoading] = useState(true)\n\n    const createBoard = (rows: number, cols: number, content: string): Promise<void> => {\n        return new Promise((resolve, reject) => {\n            let generated_board\n\n            try {\n                if (rows && cols && content) {\n                    generated_board = base64ToBoard(rows, cols, content)\n                    showToast(`Loaded shared ${rows} x ${cols} board`, \"primary\")\n                    setSavedBoard(generated_board)\n                    return resolve()\n                }\n                throw new Error('invalid board')\n            } catch (error) {\n                return reject()\n            }\n        })\n    }\n\n    useEffect(() => {\n        let parsed_rows = 0\n        let parsed_cols = 0\n\n        if (dimensions.includes('x')) {\n            const [str_rows, str_cols] = dimensions.split('x')\n            parsed_rows = parseInt(str_rows) || 0\n            parsed_cols = parseInt(str_cols) || 0\n        }\n        else if (dimensions.length && !isNaN(parseInt(dimensions))) {\n            const side = parseInt(dimensions)\n            parsed_rows = side\n            parsed_cols = side\n        }\n        console.log({ dimensions, parsed_rows, parsed_cols, content})\n\n        const call_create = async () => {\n            setIsLoading(true)\n            try {\n                await createBoard(parsed_rows, parsed_cols, content)\n            } catch (error) {\n                setSavedBoard(default_saved_board)\n                notifyInvalid()\n            } finally {\n                setIsLoading(false)\n            }\n        }\n        call_create()\n\n    }, [dimensions, content])\n\n    return (\n        <Game fromStorage={true} loadedBoard={savedBoard} isLoading={isLoading} />\n    )\n}\n\nexport default SharedGame\n","import React from 'react';\nimport { dark, light } from './styles/colors'\nimport { CurrentTheme, ThemeContext } from './context/theme'\nimport Game from './pages/Game'\n\nimport styled from 'styled-components'\nimport { FocusStyleManager, HotkeysProvider } from \"@blueprintjs/core\"\nimport { useLocalStorage } from 'react-use'\nimport SavedGame from './pages/SavedGame'\n\nimport SharedGame from './pages/SharedGame'\nimport  {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\nconst Page = styled.div`\n  height: 100vh;\n  width: 100vw;\n`\n\nfunction App() {\n  const [isDark, setIsDark] = useLocalStorage('isDark', true)\n\n  const toggleTheme = () => {\n    setIsDark(!isDark)\n  }\n\n  return (\n    <HotkeysProvider>\n      <CurrentTheme.Provider value={isDark ? dark : light}>\n        <ThemeContext.Provider value={\n            {\n              isDark: !!isDark,\n              toggleTheme,\n            }\n        }>\n          <Page className={`.bp3-ui-text ${isDark ? 'bp3-dark' : ''}`}>\n\n            <Router basename=\"/\">\n              <Switch>\n\n                <Route exact path=\"/saved/:name\">\n                  <SavedGame />\n                </Route>\n\n                <Route exact path=\"/shared/:dimensions/:content\">\n                  <SharedGame />\n                </Route>\n\n                <Route path=\"/\" exact>\n                  <Game fromStorage={false} />\n                </Route>\n\n              </Switch>\n            </Router>\n\n          </Page>\n        </ThemeContext.Provider>\n      </CurrentTheme.Provider>\n    </HotkeysProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}