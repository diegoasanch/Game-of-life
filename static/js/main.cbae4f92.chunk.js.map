{"version":3,"sources":["styles/colors.ts","context/genericContext.tsx","context/theme.ts","components/Sidebar/sections/Header.tsx","pages/Game/gameFunctions.ts","utils/toaster.ts","components/Models/game.ts","utils/url.ts","context/savedBoards.ts","utils/constants.ts","context/game.ts","components/Sidebar/sections/Footer.tsx","styles/sharedStyledComponents.tsx","components/SizeInput/SizeInput.tsx","components/SpeedInput/SpeedInput.tsx","components/Sidebar/sections/Settings.tsx","components/Sidebar/sections/SidebarSection.tsx","styles/constants.ts","components/Sidebar/sections/styles.ts","components/Sidebar/sections/BoardItem.tsx","utils/dates.ts","components/Sidebar/sections/SavedBoards.tsx","components/Sidebar/sections/SectionsContainer.tsx","components/Sidebar/Sidebar.tsx","components/Cell/Cell.tsx","components/CellGrid/CellGrid.tsx","components/BoardMenu/BoardMenu.tsx","pages/Game/Game.tsx","pages/SavedGame/SavedGame.tsx","pages/SharedGame/SharedGame.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dark","background","text","sidebar","cellBorder","cellAlive","cellDead","cellHover","header","scrollBarBg","scrollBarThumb","scrollBarThumbHover","highlightTransparency","light","buildGenericContext","getData","HookContext","createContext","children","comonData","Provider","value","useContext","useLocalStorage","isDark","setIsDark","useState","theme","setTheme","toggleTheme","useCallback","console","log","ThemeProvider","useThemeContext","StyledHeader","styled","H1","HeaderContainer","StyledSwitch","Switch","InlineIcon","Icon","Header","content","HeaderTooltip","position","Position","RIGHT","icon","intent","alignIndicator","Alignment","checked","onChange","innerLabel","innerLabelChecked","large","TooltipContent","div","className","packageJson","version","aliveNextCycle","board","row","col","ROWS","length","COLS","current","UP","DOWN","LEFT","HAS_RIGHT","HAS_DOWN","HAS_UP","HAS_LEFT","alive_neighbors","Number","alive","deep_copy","to_copy","JSON","parse","stringify","heartPattern","generateBoard","rows","cols","random","pattern","is_alive","generated","i","j","Math","round","parseInt","push","age","column","createBoard","heart","replaceAll","saved_label","name","getBoard","Promise","resolve","reject","window","localStorage","hasOwnProperty","board_string","getItem","parsed_board","created","Date","edited","board_content","undefined","AppToaster","Toaster","create","TOP","showToast","message","show","Board","loaded_board","this","getRows","getCols","bin_to_base64","bin","ascii","out","byte","substring","padEnd","String","fromCharCode","bin_to_ascii","btoa","getGameLink","board_to_bin","b64","location","host","pathname","new_hex","repeating","char","every","a","count","shorten_b64","base64ToBoard","b64Content","charCodeAt","toString","padStart","ascii_to_bin","atob","base64_to_bin","separator","indexOf","repetitions","repeat","unzip_b64","getLocalStorageBoardNames","result","Object","keys","itemName","startsWith","replace","boards","setBoards","history","useHistory","goToSaved","fetchBoards","names","newBoards","boardName","table","deleteBoard","removeItem","useEffect","saveBoard","to_save","saveBoardToLocalStorage","renameBoard","oldName","newName","toRename","find","SavedBoardsProvider","useSavedBoardsContext","storage_key","serialized_board","setItem","default_saved_board","ToggleCellState","colCount","setColCount","rowCount","setRowCount","setContent","resetCheckpoint","setResetCheckpoint","speed","setSpeed","isPlaying","setIsPlaying","iterationCount","setIterationCount","highlightNew","setHighlightNew","setName","loadedBoard","setLoadedBoard","isClickOnBoard","setIsClickOnBoard","iterateOnce","Array","isArray","new_state","current_cell","copied_data","nextCycle","prev","initializeBoard","checkpoint","useInterval","toggleState","copiedContent","resetBoard","randomizeBoard","clearBoard","togglePlaying","old","toggleHighlightNew","handleSave","getShareableLink","link","navigator","clipboard","writeText","GameContextProvider","useGameContext","Count","span","Shoutout","H6","Stats","footer","props","Footer","href","target","rel","StyledDivider","Divider","SizeInput","maxValue","placeholder","handleInput","allowNumericCharactersOnly","min","max","onValueChange","fill","SpeedInput","setValue","labelStepSize","SizeInputRow","StyledCard","Card","Settings","label","valueAsNumber","valueAsString","innputElement","onClick","rightIcon","event","disabled","StyledSectionTitle","StyledCollapse","Collapse","StyledSection","section","SidebarSection","startOpen","Component","isOpen","setIsOpen","BORDER_RADIUS","SidebarItemContainer","isActive","StyledName","Row","DetailsRow","StyledEditableText","EditableText","BoardItem","date","localName","setLocalName","useDebounce","interactive","newValue","maxLength","selectAllOnFocus","iconSize","getDate","getMonth","getFullYear","minimal","StyledSidebarItemContainer","SavedBoards","StyledForm","FormGroup","SavedBoardsInner","isNameInputFocused","setIsNameInputFocused","labelFor","labelInfo","onSubmit","preventDefault","onFocus","onBlur","id","map","StyledSectionsContainer","sidebarSections","SectionsContainer","Container","Sidebar","StyledCell","hoverBorder","Cell","cellData","cellColor","setCellColor","toggleCell","wasClickedBefore","setWasClickedBefore","handleClick","colors","onMouseEnter","onMouseLeave","backgroundColor","CellGrid","isLoading","onMouseDown","onMouseUp","size","index","cell","BoardMenu","labelElement","autoFocus","PageContainer","SideContainer","MainContainer","ResizedContextMenu","ContextMenu2","Game","hotkeysConfig","useMemo","combo","global","onKeyDown","useGameHotkeysConfig","useHotkeys","handleKeyDown","handleKeyUp","onKeyUp","SavedGame","useParams","savedBoard","setSavedBoard","setIsLoading","fetchBoard","from_localstorage","SharedGame","dimensions","boardContent","generated_board","Error","error","parsed_rows","parsed_cols","includes","split","str_rows","str_cols","isNaN","side","call_create","FocusStyleManager","onlyShowFocusOnTabs","Page","App","basename","exact","path","StyledComponentsThemeProvider","ThemedPageContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbae4f92.chunk.js","sourcesContent":[" import { Itheme } from '../types/styles'\n\nexport const dark: Itheme = {\n    background: '#2F3437',\n    text: '#EBEBEB',\n    sidebar: '#151515',\n    cellBorder: '#000000',\n    cellAlive: '#0E0F1E',\n    cellDead: '#586268',\n    cellHover: '#48AFF0',\n    header: '#19A6FF',\n    scrollBarBg: '#4F585D',\n    scrollBarThumb: '#2F3437',\n    scrollBarThumbHover: '#1C1F21',\n    highlightTransparency: '77',\n}\nexport const light: Itheme = {\n    background: '#EBEBEB',\n    text: '#37352F',\n    sidebar: '#FFFFFF',\n    cellBorder: '#343434',\n    cellAlive: '#0E0F10',\n    cellDead: '#EEEEEE',\n    cellHover: '#48AFF0',\n    header: '#19A6FF',\n    scrollBarBg: '#B7B7B7',\n    scrollBarThumb: '#888888',\n    scrollBarThumbHover: '#212121',\n    highlightTransparency: '99',\n}\n","import { Context, createContext, useContext } from 'react'\n\nexport const buildGenericContext = <T extends unknown>(\n\tgetData: () => T\n): [({ children }: any) => JSX.Element, () => T, Context<T>] => {\n\tconst HookContext = createContext<T>({} as T)\n\tconst provider = ({ children }: any) => {\n\t\tconst comonData = getData()\n\n\t\treturn <HookContext.Provider value={comonData}>{children}</HookContext.Provider>\n\t}\n\n\tconst useProviderContext = () => useContext(HookContext)\n\n\treturn [provider, useProviderContext, HookContext]\n}\n","import { useCallback, useState } from \"react\"\nimport { useLocalStorage } from \"react-use\"\nimport { dark, light } from \"../styles/colors\"\nimport { Itheme } from '../types/styles';\nimport { buildGenericContext } from './genericContext';\n\n\nconst useTheme = () => {\n    const [isDark, setIsDark] = useLocalStorage<boolean>('isDark', true)\n    const [theme, setTheme] = useState<Itheme>(dark)\n\n    const toggleTheme = useCallback(() => {\n        console.log(`Toggle theme`)\n\n        let newTheme: Itheme\n        if (!isDark)\n            newTheme = dark\n        else\n            newTheme = light\n\n        setTheme(newTheme)\n        setIsDark(!isDark)\n\n    }, [setIsDark, isDark, setTheme])\n\n    return { theme, isDark: !!isDark, toggleTheme }\n}\n\nexport const [ThemeProvider, useThemeContext] = buildGenericContext(useTheme)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Alignment, H1, Icon, Position, Switch } from '@blueprintjs/core'\nimport packageJson from '../../../../package.json'\nimport { Tooltip2 } from '@blueprintjs/popover2'\nimport { useThemeContext } from '../../../context/theme'\n\nconst StyledHeader = styled(H1)`\n    font-size: 3.5em !important;\n    line-height: .9em !important;\n    font-weight: bold;\n    align-self: flex-start;\n`\nconst HeaderContainer = styled.header`\n    position: relative;\n    width: 100%;\n`\nconst StyledSwitch = styled(Switch)`\n    position: absolute;\n    bottom: 0;\n    right: 0;\n`\nconst InlineIcon = styled(Icon)`\n    display: inline-block;\n    vertical-align: super;\n    margin-left: .2em;\n`\n\nexport const Header = () => {\n    const { isDark, toggleTheme } = useThemeContext()\n    return (\n        <HeaderContainer>\n            <Tooltip2 content={HeaderTooltip} position={Position.RIGHT}>\n                <StyledHeader>\n                    Game <br/>\n                    of <br/>\n                    Life\n                    <InlineIcon icon=\"info-sign\" intent=\"primary\"/>\n                </StyledHeader>\n            </Tooltip2>\n            <StyledSwitch\n                alignIndicator={Alignment.RIGHT}\n                checked={isDark}\n                onChange={toggleTheme}\n                innerLabel=\"light\"\n                innerLabelChecked=\"dark\"\n                large\n            />\n        </HeaderContainer>\n    )\n}\n\nconst TooltipContent = styled.div`\n    width: 40vw;\n    max-width: 1000px;\n    min-width: 500px;\n    padding: 1em;\n`\nconst HeaderTooltip = (\n    <TooltipContent>\n        <h1>Conway's Game of Life <span className=\"bp3-text-muted\"> - v{packageJson.version}</span></h1>\n        <p>\n            &emsp; Is a <strong>cellular automaton</strong> devised by the\n            British mathematician John\n            Horton Conway in 1970. It is a zero-player game, meaning that its\n            evolution is determined by its initial state, requiring no further\n            input.<br/>\n            &emsp; One interacts with the Game of Life by creating an initial\n            configuration and observing how it evolves.\n\n        </p>\n        <h2>How to play?</h2>\n        <p>\n            &emsp; Click on a cell to change its state. Change as many cells as you want and\n            press <strong><Icon icon=\"play\"/> Play</strong>!\n            <br/>\n            &emsp; Alternatively, click the <strong><Icon icon=\"step-forward\"/> Step by step </strong>\n            button to evolve the board one cycle at a time.\n        </p>\n        <h2>Rules</h2>\n        <ul>\n            <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation.</li>\n            <li>Any live cell with two or three live neighbours lives on to the next generation.</li>\n            <li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li>\n            <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\n        </ul>\n    </TooltipContent>\n)\n","import { boardData, ISavedBoard } from '../../types/cells'\n\nexport const aliveNextCycle = (board: boardData, row: number, col: number): boolean => {\n    const ROWS = board.length;\n    const COLS = board[0].length;\n    const current = board[row][col]\n\n    const UP = row - 1\n    const DOWN = row + 1\n    const LEFT = col - 1\n    const RIGHT = col + 1\n\n    const HAS_RIGHT = RIGHT < COLS\n    const HAS_DOWN = DOWN < ROWS\n    const HAS_UP = UP >= 0\n    const HAS_LEFT = LEFT >= 0\n\n    const top_left = (HAS_LEFT && HAS_UP) ? Number(board[UP][LEFT].alive) : 0;\n    const top_center = HAS_UP ? Number(board[UP][col].alive) : 0;\n    const top_right = (HAS_RIGHT && HAS_UP) ? Number(board[UP][RIGHT].alive) : 0;\n    const center_left = HAS_LEFT ? Number(board[row][LEFT].alive) : 0;\n    const center_right = HAS_RIGHT ? Number(board[row][RIGHT].alive) : 0;\n    const bottom_left = (HAS_LEFT && HAS_DOWN) ? Number(board[DOWN][LEFT].alive) : 0;\n    const bottom_center = HAS_DOWN ? Number(board[DOWN][col].alive) : 0;\n    const bottom_right = (HAS_DOWN && HAS_RIGHT) ? Number(board[DOWN][RIGHT].alive) : 0;\n\n    const alive_neighbors = (top_left + top_center + top_right + center_left + center_right + bottom_left + bottom_center + bottom_right)\n    return (alive_neighbors === 3) || (current.alive && alive_neighbors === 2)\n}\n\nexport const nextCycle = (board: boardData) : boardData => {\n    const copied_data = deep_copy(board) // copy the board\n    let i\n    let j\n\n    const rows = board.length;\n    const cols = board[0].length;\n    let new_state\n    let current_cell\n\n    for (i = 0; i < rows; i++) {\n        for (j = 0; j < cols; j++) {\n            new_state = aliveNextCycle(board, i, j)\n            current_cell = copied_data[i][j]\n            current_cell.alive = new_state\n\n            if (new_state) {\n                current_cell.age += 1\n            }\n            else {\n                current_cell.age = 0\n            }\n        }\n    }\n    return copied_data\n}\n\nexport const deep_copy = (to_copy: any): any => {\n    return JSON.parse(JSON.stringify(to_copy))\n}\n\n\nconst heartPattern: string = `\n0000000000000000000000000100000000000000\n0000000000000000000000000000000100000000\n0000000000100000000000010000000100000000\n0001100011000000100000000000000100000110\n0000100001000000010000000000000000000010\n0000000000000000001000000000000000000000\n0000000000000000000000000000000000000000\n0000000000000000000000000000000001000000\n0000000000000000000000000010000000000000\n0000000000000000000000000000000000000000\n0000000000000000011000110000000000000000\n0000000000000000111101111000000000000000\n0001100000000001111111111100000000000000\n0011000000000001111111111100000000000000\n0010000000000000111111111000000011000001\n0000000000000000011111110000000000000000\n0000100001000000001111100000000000000010\n0000100001001000000111000000000000000010\n0000100001011100000010000000000000000010\n0000000000110000000000000000000000000000\n0000000000000000000000000000000000000000\n0000000000000000000000000000000000000000\n0000000000000000000000000010000000000000\n0000000000000000000000000111000000000000\n0000000000000000000000000010000100000000\n0000011100001110000000000000000010000000\n0000000000000010000000000000000001000000\n0000000000000000000000000000000000000000\n0000000000000000000000110000000011000000\n1000010000000000000000100000000001100000\n`\n\nexport const generateBoard = (rows: number, cols: number, random?: boolean, pattern?: string): boardData => {\n    const generated = []\n    let row;\n    let is_alive\n\n    for (let i = 0; i < rows; i++) {\n        row = []\n        for (let j = 0; j < cols; j++) {\n            if (random)\n                is_alive = !!(Math.round(Math.random()))\n            else if (pattern?.length)\n                is_alive = !!parseInt(pattern[(i * cols) + j])\n            else\n                is_alive = false;\n\n            row.push({\n                alive: is_alive,\n                age: 0,\n                row: i,\n                column: j\n            })\n        }\n        generated.push(row)\n    }\n    return generated\n}\n\nexport const createBoard = (rows: number, cols: number, random: boolean, heart=false): boardData  => {\n    const pattern = heartPattern.replaceAll('\\n', '')\n    if (heart)\n        return generateBoard(rows, cols, random, pattern)\n    return generateBoard(rows, cols, random)\n}\n\nexport const saved_label = (name: string): string => `saved/${name.replaceAll(' ', '_')}`\n\n\nexport const getBoard = (name: string): Promise<ISavedBoard | undefined> => {\n\n    return new Promise((resolve, reject) => {\n        if (window.localStorage.hasOwnProperty(saved_label(name))) { // saved entry\n            console.log(`Getting ${name} board from localstorage`)\n            const board_string = window.localStorage.getItem(saved_label(name)) ?? '{}'\n            const parsed_board = JSON.parse(board_string)\n            const default_content: boardData = [[]]\n\n            const loaded_board: ISavedBoard = {\n                name: parsed_board.name ?? 'undefined',\n                created: parsed_board.created ?? new Date(),\n                edited: parsed_board.edited ?? new Date(),\n                board_content: parsed_board.board_content ?? default_content,\n                rows: parsed_board.board_content?.length ?? 0,\n                cols: parsed_board.board_content[0]?.length ?? 0\n            }\n            return resolve(loaded_board)\n        }\n        return resolve(undefined)\n    })\n}\n","import { Position, Toaster, Intent } from '@blueprintjs/core'\n\nexport const AppToaster = Toaster.create({\n    className: \"recipe-toaster\",\n    position: Position.TOP\n})\n\nexport const showToast = (message: string, intent?: Intent) => {\n    AppToaster.show({ message, intent })\n}\n","import { boardData, IBoard, ISavedBoard } from \"../../types/cells\";\n\nexport class Board implements IBoard {\n    public name = ''\n    public created = new Date()\n    public edited =  new Date()\n    public board_content: boardData = [[]]\n    public rows = 0\n    public cols = 0\n\n    constructor(loaded_board: ISavedBoard | null, board_content?: boardData, name?: string) {\n\n        if (loaded_board) {\n            console.log(`Creating board from: ${loaded_board}`)\n\n            this.name = loaded_board.name ?? 'undefined'\n            this.created = loaded_board.created ?? new Date()\n            this.edited =  loaded_board.edited ?? new Date()\n            this.board_content = loaded_board.board_content\n        }\n        else if (board_content) {\n            this.name = name ?? 'untitled_board'\n            this.created = new Date()\n            this.edited = new Date()\n            this.board_content = board_content\n        }\n        this.rows = this.getRows()\n        this.cols = this.getCols()\n    }\n\n    getRows() {\n        return this.board_content.length\n    }\n\n    getCols() {\n        return this.board_content[0]?.length ?? 0\n    }\n}\n","import { boardData, IBoard, ISavedBoard } from \"../types/cells\"\nimport { generateBoard } from '../pages/Game/gameFunctions'\n\nconst board_to_bin = (content: boardData): string => {\n    let bin = ''\n\n    for (let row of content) {\n        for (let col of row) {\n            bin += col.alive ? '1' : '0'\n        }\n    }\n    return bin\n}\n\nconst bin_to_ascii = (bin: string): string => {\n    let out = ''\n    let byte = ''\n\n    for (let i = 0; i < bin.length; i += 8) {\n        byte = bin.substring(i, i + 8).padEnd(8, '0')\n        out += String.fromCharCode(parseInt(byte, 2))\n    }\n    return out\n}\n\nconst bin_to_base64 = (bin: string): string => {\n    const ascii = bin_to_ascii(bin)\n    const b64 = btoa(ascii).replaceAll('/', '_')\n    return b64\n}\n\nconst shorten_b64 = (b64: string): string => {\n    let new_hex = ''\n    let current = ''\n    let next = ''\n    let repeating = false\n\n    for (let char = 0; char < b64.length; char++) {\n        current = b64[char]\n        next = (char < b64.length - 1) ? b64[char + 1] : ''\n\n        if ([current, next].every(a => a === 'A')) {\n            let count = 0\n            repeating = true\n\n            while (repeating && char < b64.length) {\n                count++\n                repeating = b64[++char] === current\n            }\n            new_hex += `&${count};`\n            char--\n        }\n        else {\n            new_hex += current\n        }\n    }\n    return new_hex\n}\n\nconst unzip_b64 = (b64: string): string => {\n    let out = ''\n    for (let i = 0; i < b64.length; i++) {\n        if (b64[i] !== '&')\n            out += b64[i]\n        else {\n            const separator = b64.indexOf(';', i);\n            const repetitions = parseInt(b64.substring(i+1, separator))\n            i = separator\n            out += 'A'.repeat(repetitions)\n        }\n    }\n    return out\n}\nconst ascii_to_bin = (ascii: string): string => {\n    let out = ''\n    let char = ''\n\n    for (let i = 0; i < ascii.length; i++) {\n        char = (ascii[i].charCodeAt(0)).toString(2).padStart(8, '0')\n        out += char\n    }\n    return out\n}\n\nconst base64_to_bin = (b64: string): string => {\n    const ascii = atob(b64.replaceAll('_', '/'))\n    const bin = ascii_to_bin(ascii)\n    return bin\n}\n\nexport const getGameLink = (board: IBoard): string => {\n    const cols = board.getCols()\n    const rows = board.getRows()\n\n    const bin = board_to_bin(board.board_content)\n    const b64 = bin_to_base64(bin)\n\n    const { host, pathname } = window.location\n    return host + pathname + `#/shared/` + (board.name ? `${board.name}/` : '') + `${rows}x${cols}/${shorten_b64(b64)}`\n}\n\nexport const base64ToBoard = (rows: number, cols: number, b64Content: string): ISavedBoard => {\n    const b64 = unzip_b64(b64Content)\n    const bin = base64_to_bin(b64)\n\n    // console.log(`Zipped: ${b64Content} \\n\\n\\n Hex: ${b64}\\n\\n\\nBinary: ${bin}`)\n\n    const content = generateBoard(rows, cols, false, bin)\n    return {\n        name: 'Shared board',\n        created: new Date(),\n        edited: new Date(),\n        board_content: content,\n        rows: content.length,\n        cols: content[0].length,\n    }\n\n}\n","import { useState, useEffect } from 'react'\nimport { IBoard, ISavedBoard } from '../types/cells';\nimport { getBoard, saved_label } from '../pages/Game/gameFunctions';\nimport { buildGenericContext } from './genericContext';\nimport { useHistory } from 'react-router-dom';\nimport { AppToaster } from '../utils/toaster';\n\nconst getLocalStorageBoardNames = (): string[] => {\n    const result = [] as string[]\n    for (const itemName of Object.keys(window.localStorage)) {\n        if (itemName.startsWith('saved/'))\n            result.push(itemName.replace('saved/', ''))\n    }\n    return result\n}\n\nconst useSavedBoards = () => {\n    const [boards, setBoards] = useState<ISavedBoard[]>([])\n    const history = useHistory()\n\n    const goToSaved = (name: string) => {\n        if (name.length) {\n            history.push(\"/\" + saved_label(name))\n        }\n        else {\n            AppToaster.show({ message: `Invalid board name`, intent: \"danger\" })\n        }\n    }\n\n    const fetchBoards = async () => {\n        const names =  getLocalStorageBoardNames()\n        const newBoards = [] as ISavedBoard[]\n\n        for (const boardName of names) {\n            const board = await getBoard(boardName)\n            if (board)\n                newBoards.push(board)\n        }\n        console.log('Saved boards: ')\n        console.table(newBoards)\n        setBoards(newBoards)\n    }\n\n    const saveBoard = (to_save: IBoard) => {\n        saveBoardToLocalStorage(to_save)\n        fetchBoards()\n        AppToaster.show({ message: `Saved board: \"${to_save.name}\"`, intent: \"success\" })\n        goToSaved(to_save.name)\n    }\n\n    const deleteBoard = (name: string, showToast = true) => {\n        window.localStorage.removeItem(saved_label(name))\n        fetchBoards()\n        if (showToast)\n            AppToaster.show({ message: `Deleted board: \"${name}\"`, intent: \"danger\" })\n    }\n\n    const renameBoard = (oldName: string, newName: string) => {\n        const toRename = boards.find(board => board.name === oldName)\n\n        if (toRename) {\n            toRename.name = newName\n            saveBoardToLocalStorage(toRename)\n            deleteBoard(oldName, false)\n            goToSaved(newName)\n            AppToaster.show({ message: `Renamed board: \"${oldName}\" -> \"${newName}\"`, intent: \"danger\" })\n        }\n    }\n\n    useEffect(() => {\n        fetchBoards()\n    }, [])\n\n    return {\n        boards,\n        goToSaved,\n        deleteBoard,\n        saveBoard,\n        renameBoard,\n    }\n}\n\nexport const [SavedBoardsProvider, useSavedBoardsContext] = buildGenericContext(useSavedBoards)\n\nexport const board_to_saved_format = (to_save: IBoard): ISavedBoard => (\n    {\n        name: to_save.name,\n        created: to_save.created,\n        edited: to_save.edited,\n        board_content: to_save.board_content,\n        cols: to_save.getCols(),\n        rows: to_save.getRows(),\n    }\n)\n\nexport const saveBoardToLocalStorage = (to_save: ISavedBoard): void => {\n    const storage_key = saved_label(to_save.name)\n\n    if (window.localStorage.hasOwnProperty(storage_key)) {\n        to_save.edited = new Date();\n    }\n    const serialized_board = JSON.stringify(to_save)\n\n    window.localStorage.setItem(storage_key, serialized_board)\n}\n","import { ISavedBoard } from \"../types/cells\";\n\nexport const default_saved_board: ISavedBoard = {\n    name: 'undefined',\n    created: new Date(),\n    edited: new Date(),\n    board_content: [[], []],\n    rows: 0,\n    cols: 0,\n}\n\nexport const MAX_NAME_LENGTH = 15\n","import { createContext, useEffect, useMemo, useState, useCallback } from 'react';\nimport { useInterval, useLocalStorage } from 'react-use'\nimport { createBoard, deep_copy, nextCycle, saved_label } from '../pages/Game/gameFunctions'\nimport { boardData, ISavedBoard } from '../types/cells';\nimport { showToast } from '../utils/toaster'\nimport { HotkeyConfig } from '@blueprintjs/core';\nimport { Board } from '../components/Models/game'\nimport { useHistory } from 'react-router-dom';\nimport { getGameLink } from '../utils/url'\nimport { useThemeContext } from './theme'\nimport { buildGenericContext } from './genericContext';\nimport { saveBoardToLocalStorage, useSavedBoardsContext } from './savedBoards';\nimport { default_saved_board, MAX_NAME_LENGTH } from '../utils/constants';\n\nexport const ToggleCellState = createContext((col: number, row: number) => {console.log('Not yet configured')})\n\nexport const useGame = () => {\n    const [colCount, setColCount] = useState(40)\n    const [rowCount, setRowCount] = useState(30)\n    const [content, setContent] = useState<boardData>(default_saved_board.board_content)\n    const [resetCheckpoint, setResetCheckpoint] = useState<boardData>(default_saved_board.board_content)\n    const [speed, setSpeed] = useState(10)\n    const [isPlaying, setIsPlaying] = useState(false)\n    const [iterationCount, setIterationCount] = useState(0)\n    const [highlightNew, setHighlightNew] = useLocalStorage('highlightNew', false)\n    const [name, setName] = useState('')\n    const [loadedBoard, setLoadedBoard] = useState<ISavedBoard>()\n    const [isClickOnBoard, setIsClickOnBoard] = useState(false)\n    const history = useHistory()\n\n    const handleName = (newName: string) => {\n        setName(newName.substring(0, MAX_NAME_LENGTH))\n    }\n\n    const toggleState = (col: number, row: number) : void => {\n        if (Array.isArray(content)) {\n            const copiedContent = deep_copy(content)\n\n            copiedContent[row][col].alive = !copiedContent[row][col].alive\n            setContent(copiedContent)\n        }\n    }\n\n    const iterateOnce = () => {\n        if (Array.isArray(content)) {\n            setContent(nextCycle(content))\n            setIterationCount(prev => prev + 1)\n        }\n    }\n\n    const initializeBoard = (rows: number, cols: number, random=false, heart=false) => {\n        setContent(createBoard(rows, cols, random, heart))\n        setIterationCount(0)\n    }\n\n    const resetBoard = () => {\n        setContent(resetCheckpoint)\n        setIterationCount(0)\n        showToast('Reset board', 'primary')\n    }\n\n    const randomizeBoard = () => {\n        initializeBoard(rowCount, colCount, true, false)\n        showToast('Randomized cells', 'primary')\n    }\n    const clearBoard = () => {\n        initializeBoard(rowCount, colCount, false, false)\n        showToast('Cleared board', 'primary')\n    }\n\n    const togglePlaying = () => {\n        setIsPlaying(old => !old)\n    }\n    const toggleHighlightNew = () => {\n        setHighlightNew(!highlightNew)\n    }\n\n    const handleSave = () => {\n        if (name.length) {\n            console.log(`Saving... ${name}`)\n            saveBoardToLocalStorage(new Board(null, content, name))\n            history.push(\"/\" + saved_label(name))\n            showToast(`Saved board: ${name}`, 'success')\n        }\n        else {\n            showToast(\"Invalid name\", 'danger')\n        }\n    }\n\n    const getShareableLink = (board?: boardData) => {\n        const toConvert = board ?? content\n        const link = getGameLink(new Board(null, toConvert, name))\n        navigator.clipboard.writeText(link)\n        showToast('Link copied to clipboard.', 'primary')\n    }\n\n    useEffect(() => {\n        let checkpoint: boardData | undefined;\n\n        if (loadedBoard) {\n            setContent(loadedBoard.board_content)\n            setName(loadedBoard.name)\n            checkpoint = loadedBoard.board_content\n        }\n        else {\n            console.log('Initialize heart board')\n            initializeBoard(rowCount, colCount, false, true)\n            checkpoint = createBoard(rowCount, colCount, false, true)\n        }\n        setResetCheckpoint(checkpoint)\n    }, [rowCount, colCount, loadedBoard])\n\n    useInterval(() => {\n        iterateOnce()\n    }, isPlaying ? (1000 / speed) : null)\n\n    return {\n        colCount, setColCount,\n        rowCount, setRowCount,\n        content, setContent,\n        resetCheckpoint, setResetCheckpoint,\n        speed, setSpeed,\n        isPlaying, setIsPlaying,\n        iterationCount, setIterationCount,\n        highlightNew: !!highlightNew, setHighlightNew,\n        name, setName: handleName,\n        toggleState,\n        iterateOnce,\n        resetBoard,\n        randomizeBoard,\n        clearBoard,\n        togglePlaying,\n        toggleHighlightNew,\n        handleSave,\n        getShareableLink,\n        initializeBoard,\n        loadedBoard, setLoadedBoard,\n        isClickOnBoard, setIsClickOnBoard\n    }\n}\n\nexport const [GameContextProvider, useGameContext] = buildGenericContext(useGame)\n\nexport const useGameHotkeysConfig = () => {\n    const {\n        togglePlaying,\n        iterateOnce,\n        randomizeBoard,\n        clearBoard,\n        resetBoard,\n        toggleHighlightNew,\n        getShareableLink,\n        content,\n        name,\n        highlightNew,\n    } = useGameContext()\n\n    const { saveBoard } = useSavedBoardsContext()\n    const { toggleTheme } = useThemeContext()\n\n    const handleSave = useCallback(() => {\n        saveBoard(new Board(null, content, name))\n    }, [saveBoard, content, name])\n\n\n    const hotkeysConfig = useMemo<HotkeyConfig[]>(() => ([\n        {\n            combo: 'p',\n            global: true,\n            label: \"Play\",\n            onKeyDown: togglePlaying\n        },\n        {\n            combo: 'right',\n            global: true,\n            label: \"Iterate once\",\n            onKeyDown: iterateOnce\n        },\n        {\n            combo: 'shift + n',\n            global: true,\n            label: \"Randomize cells\",\n            onKeyDown: randomizeBoard\n        },\n        {\n            combo: 'shift + c',\n            global: true,\n            label: \"Clear board\",\n            onKeyDown: clearBoard\n        },\n        {\n            combo: 'shift + r',\n            global: true,\n            label: \"Reset Board\",\n            onKeyDown: resetBoard\n        },\n        {\n            combo: 'shift + l',\n            global: true,\n            label: \"Toggle theme\",\n            onKeyDown: toggleTheme\n        },\n        {\n            combo: 'shift + h',\n            global: true,\n            label: \"Toggle theme\",\n            onKeyDown: toggleHighlightNew\n        },\n        {\n            combo: 'shift + s',\n            global: true,\n            label: \"Save board\",\n            onKeyDown: handleSave\n        },\n        {\n            combo: 'shift + d',\n            global: true,\n            label: \"Share board\",\n            onKeyDown: getShareableLink as () => void\n        },\n    // eslint-disable-next-line\n    ]), [\n        togglePlaying,\n        iterateOnce,\n        randomizeBoard,\n        clearBoard,\n        resetBoard,\n        toggleHighlightNew,\n        handleSave,\n        getShareableLink,\n        highlightNew,\n        toggleTheme\n    ])\n\n    return { hotkeysConfig }\n}\n","import React from 'react'\nimport { H4, H6 } from '@blueprintjs/core'\nimport styled from 'styled-components'\nimport { useGameContext } from '../../../context/game'\nimport { dark } from '../../../styles/colors'\n\nconst Count = styled.span`\n    color: ${dark.header};\n`\n\nconst Shoutout = styled(H6)`\n    font-size: .9em !important;\n\n    a &:not(:hover) {\n        color: inherit;\n    }\n`\n\nconst Stats = styled.footer`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-self: end;\n    margin-top: 8px;\n    width: 100%;\n    background-color: ${props => props.theme.sidebar + '33'};\n`\n\nexport const Footer = () => {\n    const { iterationCount } = useGameContext()\n    return (\n        <Stats>\n            <H4>Iteration count: <Count>{iterationCount}</Count></H4>\n            <Shoutout className=\"bp3-text-muted\">\n                Made with 💖 by&nbsp;\n                <a href=\"https://github.com/diegoasanch\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    Diego.\n                </a>\n            </Shoutout>\n\n        </Stats>\n    )\n}\n","import { Divider } from \"@blueprintjs/core\";\nimport styled from \"styled-components\";\n\nexport const StyledDivider = styled(Divider)`\n    width: 100%;\n`\n","import React from 'react'\nimport {  NumericInput } from \"@blueprintjs/core\";\nimport { numInputCallback } from '../../types/inputs'\n\ninterface Iprops {\n    value: number,\n    maxValue: number | undefined,\n    placeholder: string,\n    handleInput: numInputCallback,\n}\n\nconst SizeInput = ({ value, maxValue, placeholder, handleInput }: Iprops) => {\n\n    return (\n        <NumericInput\n            allowNumericCharactersOnly={false}\n            min={0}\n            max={maxValue}\n            onValueChange={handleInput}\n            placeholder={placeholder}\n            value={value}\n            fill\n        />\n    )\n}\n\nexport default SizeInput\n","import React from 'react'\nimport { Slider } from \"@blueprintjs/core\";\nimport { SetNumValue } from '../../types/inputs'\n\ninterface Iprops {\n    value: number,\n    setValue: SetNumValue,\n}\n\n\nconst SpeedInput = ({ value, setValue }: Iprops) => {\n    return (\n        <Slider\n            value={value}\n            onChange={setValue}\n            max={30}\n            labelStepSize={4}\n            min={1}\n        />\n    )\n}\n\nexport default SpeedInput\n","import { Alignment, Button, ButtonGroup, Card, Icon, Label, Position, Switch } from \"@blueprintjs/core\"\nimport { Tooltip2 } from \"@blueprintjs/popover2\"\nimport styled from \"styled-components\"\nimport { useGameContext } from \"../../../context/game\"\nimport { numInputCallback, SetNumValue } from \"../../../types/inputs\"\nimport SizeInput from \"../../SizeInput\"\nimport SpeedInput from \"../../SpeedInput\"\n\nconst SizeInputRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    justify-items: center;\n    align-items: center;\n\n    > * {\n        padding: 0 5%;\n    }\n`\n\nconst StyledCard = styled(Card)`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    padding: 5px;\n\n    > * {\n        margin: .5em 0;\n    }\n`\n\nexport const Settings = () => {\n    const {\n        rowCount,\n        colCount,\n        setRowCount,\n        setColCount,\n        iterateOnce,\n        speed,\n        setSpeed,\n        isPlaying,\n        togglePlaying,\n        resetBoard,\n        randomizeBoard,\n        clearBoard,\n        highlightNew,\n        toggleHighlightNew,\n    } = useGameContext()\n\n    const handleColInput: numInputCallback = (valueAsNumber, valueAsString, innputElement) => {\n        setColCount(valueAsNumber)\n    }\n    const handleRowInput: numInputCallback = (valueAsNumber, valueAsString, innputElement) => {\n        setRowCount(valueAsNumber)\n    }\n    const handleSpeed: SetNumValue = (value) => {\n        setSpeed(value)\n    }\n    const handleClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n        iterateOnce()\n    }\n\n    return (\n        <StyledCard>\n\n            <Switch\n                alignIndicator={Alignment.RIGHT}\n                checked={highlightNew}\n                onChange={toggleHighlightNew}\n                label=\"Highlight new cells\"\n                // large\n            />\n            <SizeInputRow>\n                <Label>\n                    Rows\n                    <SizeInput\n                        value={rowCount}\n                        maxValue={250}\n                        placeholder=\"Row count\"\n                        handleInput={handleRowInput}\n                    />\n                </Label>\n                <Label>\n                    Columns\n                    <SizeInput\n                        value={colCount}\n                        maxValue={250}\n                        placeholder=\"Column count\"\n                        handleInput={handleColInput}\n                    />\n                </Label>\n            </SizeInputRow>\n            <Label>\n                Iteration Speed\n                <span className=\"bp3-text-muted\"> (Hz)</span>\n                <SpeedInput\n                    value={speed}\n                    setValue={handleSpeed}\n                />\n            </Label>\n\n            <ButtonGroup large>\n                <Tooltip2\n                    position={Position.TOP}\n                    content={\n                        <>\n                            <code>P</code> {isPlaying ? 'Stop': 'Start'} iterating\n                        </>\n                    }\n                >\n                    <Button\n                        text={isPlaying ? \"Pause\" : \"Play\"}\n                        icon={isPlaying ? \"pause\" : \"play\"}\n                        intent=\"primary\"\n                        onClick={togglePlaying}\n                    />\n                </Tooltip2>\n                <Tooltip2\n                    position={Position.TOP}\n                    content={\n                        <>\n                            <code>\n                                <Icon icon=\"arrow-right\" />\n                            </code>&nbsp;\n                            Step-by-step\n                        </>\n                    }\n                >\n                    <Button\n                        rightIcon=\"step-forward\"\n                        onClick={handleClick}\n                        disabled={isPlaying}\n                    />\n                </Tooltip2>\n\n            </ButtonGroup>\n            <ButtonGroup>\n                <Tooltip2\n                    intent=\"danger\"\n                    position={Position.TOP}\n                    content={\n                        <>\n                            <code>\n                                shift + r\n                            </code>&nbsp;\n                            Reset board\n                        </>\n                    }\n                >\n                    <Button\n                        onClick={resetBoard}\n                        icon=\"reset\"\n                        intent=\"danger\"\n                    />\n                </Tooltip2>\n                <Tooltip2\n                    position={Position.TOP}\n                    content={\n                        <>\n                            <code>\n                                shift + c\n                            </code>&nbsp;\n                            Clear board\n                        </>\n                    }\n                >\n                    <Button\n                        onClick={clearBoard}\n                        icon=\"eraser\"\n                    />\n                </Tooltip2>\n                <Tooltip2\n                    position={Position.TOP}\n                    content={\n                        <>  <code>\n                                shift + n\n                            </code>&nbsp;\n                            Randomize cells\n                        </>\n                    }\n                >\n                    <Button\n                        text=\"Random\"\n                        onClick={randomizeBoard}\n                        icon=\"random\"\n                    />\n                </Tooltip2>\n            </ButtonGroup>\n        </StyledCard>\n    )\n}\n","import { Collapse, Icon } from '@blueprintjs/core'\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\n\nconst StyledSectionTitle = styled.div`\n    display: flex;\n    align-items: center;\n    height: 3em;\n    cursor: pointer;\n`\n\nexport type SidebarSectionProps = {\n    name: string\n    startOpen: boolean\n    Component: React.ReactNode\n}\n\nconst StyledCollapse = styled(Collapse)`\n    padding-left: .5em;\n`\n\nconst StyledSection = styled.section`\n    width: 100%;\n`\n\nexport const SidebarSection = ({ name, startOpen, Component }: SidebarSectionProps) => {\n    const [isOpen, setIsOpen] = useState(startOpen)\n\n    const toggleOpen = () => {\n        setIsOpen(prev => !prev)\n    }\n\n    return (\n        <StyledSection>\n            <StyledSectionTitle onClick={toggleOpen}>\n                <h3>\n                    <Icon icon={isOpen ? 'chevron-down' : 'chevron-right'} />\n                    <code>{name}</code>\n                </h3>\n            </StyledSectionTitle>\n            <StyledCollapse isOpen={isOpen}>\n                { Component }\n            </StyledCollapse>\n        </StyledSection>\n    )\n}\n","export const BORDER_RADIUS = '5px'\n","import styled from \"styled-components\";\n\nexport const SidebarItemContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n\n    > * {\n        margin: .5em 0;\n    }\n`\n","import { Card, ButtonGroup, Button, Position, EditableText, Icon } from '@blueprintjs/core';\nimport { Tooltip2 } from '@blueprintjs/popover2';\nimport { useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport styled from \"styled-components\"\nimport { useGameContext } from '../../../context/game';\nimport { useSavedBoardsContext } from '../../../context/savedBoards';\nimport { ISavedBoard } from \"../../../types/cells\"\nimport { getDateLabel } from '../../../utils/dates';\n\nconst StyledCard = styled(Card)<BoardItemProps>`\n    width: 100%;\n    padding: .5em;\n    padding-left: .8em;\n    margin: .3em 0;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n\n    border: ${({ isActive, theme }) => isActive ? ('1.5px solid ' + theme.cellHover) : ''};\n\n    .bp3-button-group {\n        opacity: .4;\n    }\n\n    .editIcon {\n        opacity: 0;\n        margin-left: .5em;\n    }\n\n    &:hover .bp3-button-group {\n        opacity: 1;\n    }\n    &:hover .editIcon {\n        opacity: 1;\n    }\n`\n\nconst StyledName = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n\n    h6 {\n        margin: .2em 0;\n    }\n    small {\n        color: ${props => props.theme};\n        font-size: .8em;\n    }\n`\n\nconst Row = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: baseline;\n`\nconst DetailsRow = styled(Row)`\n    width: 90%;\n    max-width: 16ch;\n    justify-content: space-between;\n`\n\nconst StyledEditableText = styled(EditableText)`\n    width: ${props => Math.max(props.value?.length ?? 0, 5) + 'ch'};\n`\n\ntype BoardItemProps = {\n    isActive?: boolean\n}\n\nexport const BoardItem = ({ name, cols, rows, board_content, edited, isActive }: ISavedBoard & BoardItemProps) => {\n    const { goToSaved, deleteBoard, renameBoard } = useSavedBoardsContext()\n    const { getShareableLink } = useGameContext()\n    const [localName, setLocalName] = useState(name)\n\n    const openBoard = () => {\n        goToSaved(name)\n    }\n\n    const handleDeleteBoard = () => {\n        deleteBoard(name)\n    }\n\n    const handleShareBoard = () => {\n        getShareableLink(board_content)\n    }\n\n    const handleNameChange = (newValue: string) => {\n        setLocalName(newValue)\n    }\n\n    useDebounce(() => {\n        if (localName !== name)\n            renameBoard(name, localName)\n    }, 500, [localName, renameBoard])\n\n    return (\n        <StyledCard interactive isActive={isActive}>\n            <StyledName>\n                <Row>\n                    <StyledEditableText\n                        value={localName}\n                        onChange={handleNameChange}\n                        maxLength={15}\n                        placeholder=\"name\"\n                        selectAllOnFocus\n                    />\n                    <Icon icon=\"edit\" intent=\"primary\" className=\"editIcon\" iconSize={13} />\n                </Row>\n                <DetailsRow>\n                    <small className=\"bp3-text-muted\">\n                        {rows} x {cols}\n                    </small>\n                    <small className=\"bp3-text-muted\">\n                        {getDateLabel(edited)}\n                    </small>\n                </DetailsRow>\n            </StyledName>\n\n            <ButtonGroup minimal>\n                <Tooltip2 content=\"Open\" position={Position.TOP} minimal>\n                    <Button icon=\"document-open\" onClick={openBoard} />\n                </Tooltip2>\n\n                <Tooltip2 content=\"Share\" position={Position.TOP} minimal>\n                    <Button icon=\"link\" onClick={handleShareBoard} />\n                </Tooltip2>\n\n                <Tooltip2\n                    content=\"Delete\"\n                    position={Position.TOP}\n                    minimal\n                    intent=\"danger\"\n                >\n                    <Button icon=\"trash\" intent=\"danger\" onClick={handleDeleteBoard} />\n                </Tooltip2>\n            </ButtonGroup>\n        </StyledCard>\n    )\n}\n","export const getDateLabel = (date: Date) : string => {\n    if (typeof date === 'string')\n        date = new Date(date)\n    return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear()\n}\n","import React, { useState } from 'react'\nimport { useSavedBoardsContext } from '../../../context/savedBoards';\nimport { SidebarItemContainer } from './styles';\nimport styled from 'styled-components';\nimport { BoardItem } from './BoardItem';\nimport { Icon, InputGroup, FormGroup, Button, Card, Callout, H4, Position } from \"@blueprintjs/core\";\nimport { useGameContext } from '../../../context/game';\nimport { Board } from '../../Models/game';\nimport { SidebarSection } from './SidebarSection';\nimport { Tooltip2 } from '@blueprintjs/popover2';\n\nconst StyledSidebarItemContainer = styled(SidebarItemContainer)`\n    align-items: flex-start;\n`\n\nexport const SavedBoards = () => {\n    return (\n        <>\n            <StyledSidebarItemContainer>\n                <SavedBoardsInner />\n            </StyledSidebarItemContainer>\n        </>\n    )\n}\n\nconst StyledForm = styled(FormGroup)`\n    padding: 0 0 5px 5px;\n    width: calc(100% - 10px);\n    margin: 0;\n    margin-bottom: 1em;\n\n    .save-btn {\n        margin-top: 5px;\n    }\n`\n\nconst StyledCard = styled(Card)`\n    padding: 7px;\n    width: 100%;\n\n    .bp3-form-group {\n        margin: 0;\n    }\n`\n\nexport const SavedBoardsInner = () => {\n    const { boards, saveBoard } = useSavedBoardsContext()\n    const { name, content, setName } = useGameContext()\n    const [isNameInputFocused, setIsNameInputFocused] = useState(false)\n\n\n    const handleSave = () => {\n        saveBoard(new Board(null, content, name))\n    }\n\n    const handleNameChange = (event: React.FormEvent<HTMLElement>) => {\n        setName((event.target as HTMLInputElement).value)\n    }\n\n    const handleFormSubmit = (event: any) => {\n        event.preventDefault()\n        handleSave()\n    }\n\n    const handleInputFocus = () => {\n        console.log('Name input focus')\n        setIsNameInputFocused(true)\n    }\n\n    const handleInputBlur = () => {\n        console.log('Name input blur')\n        setIsNameInputFocused(false)\n    }\n\n    return (\n        <>\n            <StyledCard>\n                <StyledForm\n                    label=\"Save current board\"\n                    labelFor=\"name-input\"\n                    labelInfo={\n                        <>\n                            { isNameInputFocused ?\n                                <span>\n                                    enter<Icon icon=\"key-enter\" />\n                                </span>\n                            :\n                                <span>\n                                    <Icon icon=\"key-shift\" />shift + S\n                                </span>\n                            }\n                        </>\n                    }\n                >\n                    <form onSubmit={handleFormSubmit}>\n                        <InputGroup\n                            onChange={handleNameChange}\n                            onFocus={handleInputFocus}\n                            onBlur={handleInputBlur}\n                            value={name}\n                            placeholder=\"untitled_board\"\n                            id=\"name-input\"\n                        />\n                    </form>\n                    <Tooltip2\n                        position={Position.TOP}\n                        content={\n                            <span>\n                                <Icon icon=\"key-shift\" />shift + S\n                            </span>\n                        }\n                    >\n                        <Button\n                            className=\"save-btn\"\n                            text={\"Save\"}\n                            icon=\"floppy-disk\"\n                            onClick={handleSave}\n                            fill\n                        />\n                    </Tooltip2>\n\n                </StyledForm>\n            </StyledCard>\n            <SidebarSection\n                name=\"Saved Boards\"\n                startOpen\n                Component={\n                    <>\n                        { boards.length > 0 && boards.map(board => (\n                            <BoardItem\n                                isActive={board.name === name}\n                                key={\"saved_board_\" + board.name}\n                                {...board}\n                            />\n                        ))}\n                        { !boards.length && (\n                            <Callout intent=\"primary\">\n                                <H4>No saved boards...</H4>\n                                Save a board and it will apear here.\n                            </Callout>\n                        )}\n                    </>\n                }\n            />\n\n        </>\n    )\n}\n","import React from 'react'\nimport styled from \"styled-components\"\nimport { Settings } from \"./Settings\"\nimport { SidebarSection, SidebarSectionProps } from \"./SidebarSection\"\nimport { BORDER_RADIUS } from '../../../styles/constants'\nimport { SavedBoards } from './SavedBoards';\n\nconst StyledSectionsContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    overflow-y: scroll;\n    padding-right: 2px;\n\n    border: 1px solid ${props => props.theme.sidebar};\n    /* border-radius: ${BORDER_RADIUS}; */\n\n    &:hover {\n        border: 1px solid ${props => props.theme.cellHover + props.theme.highlightTransparency};\n    }\n\n    &::-webkit-scrollbar {\n        background-color: ${props => props.theme.sidebar};\n        width: 7px;\n        border-radius: ${BORDER_RADIUS};\n    }\n    &::-webkit-scrollbar-thumb {\n        background-color: ${props => props.theme.scrollBarBg};\n        border-radius: ${BORDER_RADIUS};\n    }\n    &:hover::-webkit-scrollbar {\n        background-color: ${props => props.theme.scrollBarBg};\n    }\n    &:hover::-webkit-scrollbar-thumb {\n        background-color: ${props => props.theme.scrollBarThumb};\n    }\n`\n\nconst sidebarSections: SidebarSectionProps[] = [\n    {\n        name: 'Settings',\n        startOpen: true,\n        Component: <Settings />,\n    },\n    {\n        name: 'Boards',\n        startOpen: true,\n        Component: <SavedBoards />,\n    },\n]\n\nexport const SectionsContainer = () => {\n    return (\n        <StyledSectionsContainer>\n            { sidebarSections.map(section => (\n                <SidebarSection {...section} />\n            ))}\n        </StyledSectionsContainer>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Header } from './sections/Header';\nimport { Footer } from './sections/Footer';\nimport { StyledDivider } from '../../styles/sharedStyledComponents';\nimport { SectionsContainer } from './sections/SectionsContainer';\n\nconst Container = styled.div`\n    position: relative;\n    height: 100vh;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    background-color: ${props => props.theme.sidebar};\n    padding: 8px;\n    align-items: center;\n    justify-content: space-around;\n`\n\nconst Sidebar = () => {\n    return (\n        <Container>\n            <Header />\n            <StyledDivider />\n            <SectionsContainer />\n            <StyledDivider />\n            <Footer />\n        </Container>\n    )\n}\n\nexport default Sidebar\n","import React, { useContext, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { cellContent } from '../../types/cells';\nimport { ToggleCellState, useGameContext } from '../../context/game'\nimport { useThemeContext } from '../../context/theme'\n\n\ntype CellColors = {\n    background: string\n    hoverBorder: string\n}\n\nconst StyledCell = styled.div<CellColors>`\n    height: 20px;\n    width: 20px;\n    background-color: ${props => props.background };\n    border: solid 1px ${props => props.theme.cellBorder};\n    cursor: pointer;\n\n    &:hover {\n        border: solid 3px ${props => props.hoverBorder };\n    }\n`\n\ntype CellProps = {\n    cellData: cellContent,\n    highlightNew: boolean,\n}\n\nconst Cell = ({ cellData, highlightNew }: CellProps ) => {\n    const { theme } = useThemeContext()\n    const [cellColor, setCellColor] = useState<CellColors>({ background: theme.cellDead, hoverBorder: theme.cellHover })\n    const toggleCell = useContext(ToggleCellState)\n    const { isClickOnBoard } = useGameContext()\n    const [wasClickedBefore, setWasClickedBefore] = useState(false)\n\n    const handleClick = () => {\n        toggleCell(cellData.column, cellData.row)\n    }\n\n    const handleMouseOver = () => {\n        // Only toggle on the first call\n        if (isClickOnBoard && !wasClickedBefore) {\n            handleClick()\n            setWasClickedBefore(true)\n        }\n    }\n\n    const handleMouseLeave = () => {\n        setWasClickedBefore(false)\n    }\n\n    useEffect(() => {\n        const colors: CellColors = {\n            background: theme.cellDead,\n            hoverBorder: theme.cellHover\n        }\n        if (cellData.alive) {\n            if (cellData.age === 1 && highlightNew) {\n                colors.background = theme.header\n                colors.hoverBorder = theme.sidebar\n            }\n            else {\n                colors.background = theme.cellAlive\n            }\n        }\n        setCellColor(colors)\n    // eslint-disable-next-line\n    }, [cellData, highlightNew, theme])\n\n    return (\n        <StyledCell\n            onMouseEnter={handleMouseOver}\n            onMouseLeave={handleMouseLeave}\n            {...cellColor}\n            // cellColor={getCellColor()}\n            onClick={handleClick}\n        />\n    )\n}\n\nexport default Cell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { H1, Spinner } from '@blueprintjs/core'\nimport Cell from '../Cell'\nimport { useGameContext } from '../../context/game'\nimport { BORDER_RADIUS } from '../../styles/constants'\n\nconst Container = styled.div`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    overflow: scroll;\n    height: 100%;\n    width: 100%;\n    /* width: max-content; */\n    justify-content: center;\n\n    padding: 2em 1em 1em;\n\n    &::-webkit-scrollbar {\n        background-color: ${props => props.theme.backgroundColor};\n        width: 10px;\n        height: 10px;\n        border-radius: ${BORDER_RADIUS};\n    }\n    &::-webkit-scrollbar-thumb {\n        background-color: ${props => props.theme.scrollBarBg};\n        border-radius: ${BORDER_RADIUS};\n    }\n    &:hover::-webkit-scrollbar {\n        background-color: ${props => props.theme.scrollBarBg};\n        width: 10px;\n        height: 10px;\n    }\n    &:hover::-webkit-scrollbar-thumb {\n        background-color: ${props => props.theme.scrollBarThumbHover};\n    }\n`\nconst Row = styled.div`\n    display: flex;\n    flex-direction: row;\n    margin: 0;\n`\n\ninterface Iprops {\n    isLoading: boolean\n}\n\nconst CellGrid = ({ isLoading }: Iprops) => {\n    const {\n        content: rows,\n        highlightNew,\n        setIsClickOnBoard\n    } = useGameContext()\n\n    const handleClick = () => {\n        setIsClickOnBoard(true)\n    }\n\n    const handleClickLeave = () => {\n        setIsClickOnBoard(false)\n    }\n\n    return (\n        <Container\n            onMouseDown={handleClick}\n            onMouseUp={handleClickLeave}\n        >\n            { isLoading &&\n                <>\n                    <H1>Loading...</H1>\n                    <br />\n                    <Spinner size={80} intent=\"primary\"/>\n                </>\n            }\n            { !isLoading && rows?.length && rows[0].length ?\n                ( rows.map((row, index) => (\n                    <Row key={`row_${index}`}>\n                        { row.map( cell => (\n                            <Cell\n                                key={`cell_${cell.row}_${cell.column}`}\n                                cellData={cell}\n                                highlightNew={highlightNew}\n                            />\n                        ))}\n                    </Row>\n                )))\n                :\n                <H1>Not enough cells to display 😢</H1>\n            }\n        </Container>\n    )\n}\n\nexport default CellGrid\n","import React from 'react'\nimport { Menu, MenuItem, MenuDivider, Icon, InputGroup, FormGroup, Button } from \"@blueprintjs/core\";\nimport styled from 'styled-components';\nimport { useGameContext } from '../../context/game';\nimport { useSavedBoardsContext } from '../../context/savedBoards';\nimport { Board } from '../Models/game';\n\nconst StyledForm = styled(FormGroup)`\n    padding: 0 0 5px 5px;\n    width: calc(100% - 10px);\n    margin: 0;\n\n    .save-btn {\n        margin-top: 5px;\n    }\n`\n\nconst BoardMenu = () => {\n\n    const {\n        iterateOnce,\n        isPlaying,\n        togglePlaying,\n        resetBoard,\n        randomizeBoard,\n        clearBoard,\n        name,\n        content,\n        setName,\n        getShareableLink\n    } = useGameContext()\n\n    const { saveBoard } = useSavedBoardsContext()\n\n    const handleNameChange = (event: React.FormEvent<HTMLElement>) => {\n        setName((event.target as HTMLInputElement).value)\n    }\n\n    const handleSave = () => {\n        saveBoard(new Board(null, content, name))\n    }\n\n    const handleShare = () => {\n        getShareableLink()\n    }\n\n    return (\n        <Menu>\n            <MenuItem\n                text={isPlaying ? \"Pause\" : \"Play\"}\n                icon={isPlaying ? \"pause\" : \"play\"}\n                onClick={togglePlaying}\n                intent=\"primary\"\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        P\n                    </span>\n                }\n            />\n            <MenuItem\n                text=\"Iterate once\"\n                icon=\"step-forward\"\n                onClick={iterateOnce}\n                disabled={isPlaying}\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        <Icon icon=\"arrow-right\" />\n                    </span>\n                }\n            />\n\n            <MenuDivider />\n            <StyledForm\n                label=\"Save board\"\n                labelFor=\"name-input\"\n                labelInfo={\n                    <>\n                        (<Icon icon=\"key-shift\" />S)\n                    </>\n                }\n            >\n                <InputGroup\n                    onChange={handleNameChange}\n                    value={name}\n                    placeholder=\"untitled_board\"\n                    id=\"name-input\"\n                    autoFocus\n                />\n                <Button\n                    className=\"save-btn\"\n                    text={\"Save\"}\n                    icon=\"floppy-disk\"\n                    onClick={handleSave}\n                    fill\n                />\n\n            </StyledForm>\n            <MenuItem\n                text=\"Share\"\n                icon=\"share\"\n                onClick={handleShare}\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        <Icon icon=\"key-shift\" />D\n                    </span>\n                }\n            />\n\n            <MenuDivider />\n\n            <MenuItem\n                text=\"Randomize cells\"\n                icon=\"random\"\n                onClick={randomizeBoard}\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        <Icon icon=\"key-shift\" />N\n                    </span>\n                }\n            />\n            <MenuItem\n                text=\"Clear\"\n                icon=\"eraser\"\n                onClick={clearBoard}\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        <Icon icon=\"key-shift\" />C\n                    </span>\n                }\n            />\n            <MenuItem\n                text=\"Reset\"\n                icon=\"reset\"\n                onClick={resetBoard}\n                intent=\"danger\"\n                labelElement={\n                    <span className=\"bp3-text-muted\">\n                        <Icon icon=\"key-shift\" />R\n                    </span>\n                }\n            />\n            <MenuDivider />\n            <MenuItem\n                text=\"View on GitHub\"\n                icon=\"code\"\n                labelElement={<Icon icon=\"arrow-top-right\" />}\n                href=\"https://github.com/diegoasanch/Game-of-life\"\n                target=\"_blank\"\n            />\n        </Menu>\n    )\n}\n\nexport default BoardMenu\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport Sidebar from '../../components/Sidebar'\nimport CellGrid from '../../components/CellGrid'\nimport { ISavedBoard } from '../../types/cells'\nimport { ToggleCellState, useGameContext, useGameHotkeysConfig } from '../../context/game';\nimport { IthemeProp } from '../../types/styles'\nimport { ContextMenu2 } from \"@blueprintjs/popover2\";\nimport BoardMenu from '../../components/BoardMenu'\nimport { useHotkeys } from \"@blueprintjs/core\";\n\nconst PageContainer = styled.div<IthemeProp>`\n    width: 100%;\n    height: 100%;\n    background-color: ${props => props.theme.background};\n    color: ${props => props.theme.text};\n    display: flex;\n    flex-direction: row;\n`\nconst SideContainer = styled.div`\n    width: 22vw;\n    max-width: 330px;\n    min-width: 260px;\n`\nconst MainContainer = styled.div`\n    /* width: calc(100% - 20vw); */\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    height: calc(100% - 2px);\n    flex: 1 1;\n    border: 1px solid ${props => props.theme.background};\n\n    &:hover {\n        border: 1px solid ${props => props.theme.cellHover  + props.theme.highlightTransparency};\n    }\n`\nconst ResizedContextMenu = styled(ContextMenu2)`\n    height: 100vh;\n    width: 100vw;\n`\n\ntype GameProps = {\n    loadedBoard?: ISavedBoard,\n    isLoading?: boolean,\n}\n\nconst Game = ({ loadedBoard, isLoading }: GameProps) => {\n    const {\n        toggleState,\n        setLoadedBoard\n    } = useGameContext()\n\n    useEffect(() => {\n        setLoadedBoard(loadedBoard)\n    }, [loadedBoard, setLoadedBoard])\n\n    const { hotkeysConfig } = useGameHotkeysConfig()\n    const { handleKeyDown, handleKeyUp } = useHotkeys(hotkeysConfig)\n\n    return (\n        <div onKeyDown={handleKeyDown} onKeyUp={handleKeyUp}>\n            <ToggleCellState.Provider value={toggleState} >\n                <ResizedContextMenu content={\n                    <BoardMenu />\n                }>\n                    <PageContainer>\n\n                        <SideContainer>\n                            <Sidebar />\n                        </SideContainer>\n\n                        <MainContainer>\n                            <CellGrid isLoading={!!isLoading} />\n                        </MainContainer>\n\n                    </PageContainer>\n                </ResizedContextMenu>\n            </ToggleCellState.Provider>\n        </div>\n    )\n}\n\nexport default Game\n","import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { default_saved_board } from '../../utils/constants'\nimport { AppToaster } from '../../utils/toaster'\nimport Game from '../Game'\nimport { getBoard } from '../Game/gameFunctions'\n\ntype IUrlParams = {\n    name: string,\n}\n\nfunction SavedGame() {\n\n    const { name } = useParams<IUrlParams>()\n    const [savedBoard, setSavedBoard] = useState(default_saved_board)\n    const [isLoading, setIsLoading] = useState(true)\n\n    useEffect(() => {\n        const fetchBoard = async () => {\n            try {\n                const from_localstorage = await getBoard(name)\n                if (from_localstorage) {\n                    setSavedBoard(from_localstorage)\n                    AppToaster.show({ message: `Loaded board \"${name}\"`, intent: \"primary\"})\n                }\n                else {\n                    setSavedBoard(default_saved_board)\n                    AppToaster.show({ message: `Couldn't load board \"${name}\"`, intent: \"danger\"})\n                }\n            } catch (error) {\n                AppToaster.show({ message: \"Error loading the board.\", intent: 'danger'})\n            } finally {\n                setIsLoading(false)\n            }\n        }\n\n        setIsLoading(true)\n        fetchBoard()\n\n    }, [name])\n\n    return (\n        <Game loadedBoard={savedBoard} isLoading={isLoading} />\n    )\n}\n\nexport default SavedGame\n","import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { showToast } from '../../utils/toaster'\nimport Game from '../Game'\nimport { base64ToBoard } from '../../utils/url'\nimport { default_saved_board } from '../../utils/constants'\n\ntype IUrlParams = {\n    name?: string,\n    dimensions: string,\n    content: string,\n}\n\n\nconst notifyInvalid = () => {\n    console.error(\"Invalid board\")\n    showToast('Invalid board', 'danger')\n}\n\nfunction SharedGame() {\n\n    const { name, dimensions, content } = useParams<IUrlParams>()\n    const [savedBoard, setSavedBoard] = useState(default_saved_board)\n    const [isLoading, setIsLoading] = useState(true)\n\n    const createBoard = (rows: number, cols: number, boardContent: string): Promise<void> => {\n        return new Promise((resolve, reject) => {\n            let generated_board\n\n            try {\n                if (rows && cols && boardContent) {\n                    generated_board = base64ToBoard(rows, cols, boardContent)\n                    showToast(`Loaded ${rows} x ${cols} board` + (name ? `: ${name}` : ''), \"primary\")\n                    setSavedBoard({ ...generated_board, name: name ?? 'untitled_board' })\n                    return resolve()\n                }\n                throw new Error('invalid board')\n            } catch (error) {\n                return reject()\n            }\n        })\n    }\n\n    useEffect(() => {\n        let parsed_rows = 0\n        let parsed_cols = 0\n\n        if (dimensions.includes('x')) {\n            const [str_rows, str_cols] = dimensions.split('x')\n            parsed_rows = parseInt(str_rows) || 0\n            parsed_cols = parseInt(str_cols) || 0\n        }\n        else if (dimensions.length && !isNaN(parseInt(dimensions))) {\n            const side = parseInt(dimensions)\n            parsed_rows = side\n            parsed_cols = side\n        }\n        console.log({ dimensions, parsed_rows, parsed_cols, content, name})\n\n        const call_create = async () => {\n            setIsLoading(true)\n            try {\n                await createBoard(parsed_rows, parsed_cols, content)\n            } catch (error) {\n                setSavedBoard(default_saved_board)\n                notifyInvalid()\n            } finally {\n                setIsLoading(false)\n            }\n        }\n        call_create()\n    // eslint-disable-next-line\n    }, [dimensions, content, name])\n\n    return (\n        <Game loadedBoard={savedBoard} isLoading={isLoading} />\n    )\n}\n\nexport default SharedGame\n","import React from 'react';\nimport Game from './pages/Game'\nimport styled, { ThemeProvider as StyledThemeProvider } from 'styled-components'\nimport { FocusStyleManager, HotkeysProvider } from \"@blueprintjs/core\"\nimport SavedGame from './pages/SavedGame'\nimport SharedGame from './pages/SharedGame'\nimport  {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\nimport { ThemeProvider, useThemeContext } from './context/theme';\nimport { SavedBoardsProvider } from './context/savedBoards';\nimport { GameContextProvider } from './context/game';\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\nconst Page = styled.div`\n  height: 100vh;\n  width: 100vw;\n`\n\nfunction App() {\n\n  return (\n    <HotkeysProvider>\n      <ThemeProvider>\n        <StyledComponentsThemeProvider>\n          <Router basename=\"/\">\n            <ThemedPageContainer>\n\n              <Switch>\n\n                <Route exact path=\"/saved/:name\">\n                  <SavedGame />\n                </Route>\n\n                <Route exact path=\"/shared/:dimensions/:content\">\n                  <SharedGame />\n                </Route>\n\n                <Route exact path=\"/shared/:name/:dimensions/:content\">\n                  <SharedGame />\n                </Route>\n\n                <Route path=\"/\" exact>\n                  <Game />\n                </Route>\n\n              </Switch>\n\n            </ThemedPageContainer>\n          </Router>\n        </StyledComponentsThemeProvider>\n      </ThemeProvider>\n    </HotkeysProvider>\n  );\n}\n\nexport default App;\n\nconst StyledComponentsThemeProvider = ({ children }: any) => {\n  const { theme, isDark, toggleTheme } = useThemeContext()\n\n  return (\n    <StyledThemeProvider theme={{ ...theme, isDark, toggleTheme }}>\n      {children}\n    </StyledThemeProvider>\n  )\n}\n\nconst ThemedPageContainer = ({ children }: any) => {\n  const { isDark } = useThemeContext()\n\n  return (\n    <GameContextProvider>\n      <SavedBoardsProvider>\n        <Page className={`.bp3-ui-text ${isDark ? 'bp3-dark' : ''}`}>\n          {children}\n        </Page>\n      </SavedBoardsProvider>\n    </GameContextProvider>\n  )\n\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}